Shader "TMPro/Mobile/Distance Field Overlay" {
Properties {
 _FaceColor ("Face Color", Color) = (1,1,1,1)
 _FaceDilate ("Face Dilate", Range(-1,1)) = 0
 _OutlineColor ("Outline Color", Color) = (0,0,0,1)
 _OutlineWidth ("Outline Thickness", Range(0,1)) = 0
 _OutlineSoftness ("Outline Softness", Range(0,1)) = 0
 _UnderlayColor ("Border Color", Color) = (0,0,0,0.5)
 _UnderlayOffsetX ("Border OffsetX", Range(-1,1)) = 0
 _UnderlayOffsetY ("Border OffsetY", Range(-1,1)) = 0
 _UnderlayDilate ("Border Dilate", Range(-1,1)) = 0
 _UnderlaySoftness ("Border Softness", Range(0,1)) = 0
 _WeightNormal ("Weight Normal", Float) = 0
 _WeightBold ("Weight Bold", Float) = 0.5
 _ShaderFlags ("Flags", Float) = 0
 _ScaleRatioA ("Scale RatioA", Float) = 1
 _ScaleRatioB ("Scale RatioB", Float) = 1
 _ScaleRatioC ("Scale RatioC", Float) = 1
 _MainTex ("Font Atlas", 2D) = "white" {}
 _TextureWidth ("Texture Width", Float) = 512
 _TextureHeight ("Texture Height", Float) = 512
 _GradientScale ("Gradient Scale", Float) = 5
 _ScaleX ("Scale X", Float) = 1
 _ScaleY ("Scale Y", Float) = 1
 _PerspectiveFilter ("Perspective Correction", Range(0,1)) = 0.875
 _VertexOffsetX ("Vertex OffsetX", Float) = 0
 _VertexOffsetY ("Vertex OffsetY", Float) = 0
 _MaskID ("Mask ID", Float) = 0
 _MaskCoord ("Mask Coords", Vector) = (0,0,100000,100000)
 _MaskSoftnessX ("Mask SoftnessX", Float) = 0
 _MaskSoftnessY ("Mask SoftnessY", Float) = 0
}
SubShader { 
 Tags { "QUEUE"="Overlay" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
 Pass {
  Tags { "QUEUE"="Overlay" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" }
  ZTest Always
  ZWrite Off
  Cull [_CullMode]
  Fog { Mode Off }
  Blend One OneMinusSrcAlpha
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_projection;
uniform lowp vec4 _FaceColor;
uniform highp float _FaceDilate;
uniform highp float _OutlineSoftness;
uniform lowp vec4 _OutlineColor;
uniform highp float _OutlineWidth;
uniform highp float _WeightNormal;
uniform highp float _WeightBold;
uniform highp float _ScaleRatioA;
uniform highp float _VertexOffsetX;
uniform highp float _VertexOffsetY;
uniform highp vec4 _MaskCoord;
uniform highp float _GradientScale;
uniform highp float _ScaleX;
uniform highp float _ScaleY;
uniform highp float _PerspectiveFilter;
varying lowp vec4 xlv_COLOR;
varying lowp vec4 xlv_COLOR1;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  lowp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  lowp vec4 outlineColor_4;
  lowp vec4 faceColor_5;
  highp float opacity_6;
  highp float scale_7;
  highp vec4 vert_8;
  highp float tmpvar_9;
  tmpvar_9 = float((0.0 >= _glesMultiTexCoord1.y));
  vert_8.zw = _glesVertex.zw;
  vert_8.x = (_glesVertex.x + _VertexOffsetX);
  vert_8.y = (_glesVertex.y + _VertexOffsetY);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * vert_8);
  highp vec2 tmpvar_11;
  tmpvar_11.x = _ScaleX;
  tmpvar_11.y = _ScaleY;
  highp mat2 tmpvar_12;
  tmpvar_12[0] = glstate_matrix_projection[0].xy;
  tmpvar_12[1] = glstate_matrix_projection[1].xy;
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_10.ww / (tmpvar_11 * abs(
    (tmpvar_12 * _ScreenParams.xy)
  )));
  highp float tmpvar_14;
  tmpvar_14 = (inversesqrt(dot (tmpvar_13, tmpvar_13)) * ((
    abs(_glesMultiTexCoord1.y)
   * _GradientScale) * 1.5));
  scale_7 = tmpvar_14;
  if ((glstate_matrix_projection[3].w == 0.0)) {
    highp vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = _WorldSpaceCameraPos;
    scale_7 = mix ((tmpvar_14 * (1.0 - _PerspectiveFilter)), tmpvar_14, abs(dot (tmpvar_1, 
      normalize((((_World2Object * tmpvar_15).xyz * unity_Scale.w) - vert_8.xyz))
    )));
  };
  highp float tmpvar_16;
  tmpvar_16 = (scale_7 / (1.0 + (
    (_OutlineSoftness * _ScaleRatioA)
   * scale_7)));
  scale_7 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (((0.5 - 
    ((mix (_WeightNormal, _WeightBold, tmpvar_9) / _GradientScale) + ((_FaceDilate * _ScaleRatioA) * 0.5))
  ) * tmpvar_16) - 0.5);
  highp float tmpvar_18;
  tmpvar_18 = (((_OutlineWidth * _ScaleRatioA) * 0.5) * tmpvar_16);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_2.w;
  opacity_6 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.xyz = tmpvar_2.xyz;
  tmpvar_20.w = opacity_6;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * _FaceColor);
  faceColor_5 = tmpvar_21;
  outlineColor_4.xyz = _OutlineColor.xyz;
  faceColor_5.xyz = (faceColor_5.xyz * faceColor_5.w);
  highp float tmpvar_22;
  tmpvar_22 = (_OutlineColor.w * opacity_6);
  outlineColor_4.w = tmpvar_22;
  outlineColor_4.xyz = (_OutlineColor.xyz * outlineColor_4.w);
  highp vec4 tmpvar_23;
  tmpvar_23 = mix (faceColor_5, outlineColor_4, vec4(sqrt(min (1.0, 
    (tmpvar_18 * 2.0)
  ))));
  outlineColor_4 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.x = tmpvar_16;
  tmpvar_24.y = (tmpvar_17 - tmpvar_18);
  tmpvar_24.z = (tmpvar_17 + tmpvar_18);
  tmpvar_24.w = tmpvar_17;
  highp vec4 tmpvar_25;
  tmpvar_25.xy = (vert_8.xy - _MaskCoord.xy);
  tmpvar_25.zw = (0.5 / tmpvar_13);
  mediump vec4 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_26 = tmpvar_24;
  tmpvar_27 = tmpvar_25;
  gl_Position = tmpvar_10;
  xlv_COLOR = faceColor_5;
  xlv_COLOR1 = outlineColor_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_26;
  xlv_TEXCOORD2 = tmpvar_27;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
varying lowp vec4 xlv_COLOR;
varying lowp vec4 xlv_COLOR1;
varying highp vec2 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture2D (_MainTex, xlv_TEXCOORD0);
  mediump float tmpvar_2;
  tmpvar_2 = (tmpvar_1.w * xlv_TEXCOORD1.x);
  mediump float tmpvar_3;
  tmpvar_3 = clamp ((tmpvar_2 - xlv_TEXCOORD1.z), 0.0, 1.0);
  mediump float tmpvar_4;
  tmpvar_4 = clamp ((tmpvar_2 - xlv_TEXCOORD1.y), 0.0, 1.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = (mix (xlv_COLOR1, xlv_COLOR, vec4(tmpvar_3)) * tmpvar_4);
  gl_FragData[0] = tmpvar_5;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_Scale;
uniform highp mat4 glstate_matrix_projection;
uniform lowp vec4 _FaceColor;
uniform highp float _FaceDilate;
uniform highp float _OutlineSoftness;
uniform lowp vec4 _OutlineColor;
uniform highp float _OutlineWidth;
uniform highp float _WeightNormal;
uniform highp float _WeightBold;
uniform highp float _ScaleRatioA;
uniform highp float _VertexOffsetX;
uniform highp float _VertexOffsetY;
uniform highp vec4 _MaskCoord;
uniform highp float _GradientScale;
uniform highp float _ScaleX;
uniform highp float _ScaleY;
uniform highp float _PerspectiveFilter;
out lowp vec4 xlv_COLOR;
out lowp vec4 xlv_COLOR1;
out highp vec2 xlv_TEXCOORD0;
out mediump vec4 xlv_TEXCOORD1;
out mediump vec4 xlv_TEXCOORD2;
void main ()
{
  highp vec3 tmpvar_1;
  tmpvar_1 = normalize(_glesNormal);
  lowp vec4 tmpvar_2;
  tmpvar_2 = _glesColor;
  highp vec2 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0.xy;
  lowp vec4 outlineColor_4;
  lowp vec4 faceColor_5;
  highp float opacity_6;
  highp float scale_7;
  highp vec4 vert_8;
  highp float tmpvar_9;
  tmpvar_9 = float((0.0 >= _glesMultiTexCoord1.y));
  vert_8.zw = _glesVertex.zw;
  vert_8.x = (_glesVertex.x + _VertexOffsetX);
  vert_8.y = (_glesVertex.y + _VertexOffsetY);
  highp vec4 tmpvar_10;
  tmpvar_10 = (glstate_matrix_mvp * vert_8);
  highp vec2 tmpvar_11;
  tmpvar_11.x = _ScaleX;
  tmpvar_11.y = _ScaleY;
  highp mat2 tmpvar_12;
  tmpvar_12[0] = glstate_matrix_projection[0].xy;
  tmpvar_12[1] = glstate_matrix_projection[1].xy;
  highp vec2 tmpvar_13;
  tmpvar_13 = (tmpvar_10.ww / (tmpvar_11 * abs(
    (tmpvar_12 * _ScreenParams.xy)
  )));
  highp float tmpvar_14;
  tmpvar_14 = (inversesqrt(dot (tmpvar_13, tmpvar_13)) * ((
    abs(_glesMultiTexCoord1.y)
   * _GradientScale) * 1.5));
  scale_7 = tmpvar_14;
  if ((glstate_matrix_projection[3].w == 0.0)) {
    highp vec4 tmpvar_15;
    tmpvar_15.w = 1.0;
    tmpvar_15.xyz = _WorldSpaceCameraPos;
    scale_7 = mix ((tmpvar_14 * (1.0 - _PerspectiveFilter)), tmpvar_14, abs(dot (tmpvar_1, 
      normalize((((_World2Object * tmpvar_15).xyz * unity_Scale.w) - vert_8.xyz))
    )));
  };
  highp float tmpvar_16;
  tmpvar_16 = (scale_7 / (1.0 + (
    (_OutlineSoftness * _ScaleRatioA)
   * scale_7)));
  scale_7 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (((0.5 - 
    ((mix (_WeightNormal, _WeightBold, tmpvar_9) / _GradientScale) + ((_FaceDilate * _ScaleRatioA) * 0.5))
  ) * tmpvar_16) - 0.5);
  highp float tmpvar_18;
  tmpvar_18 = (((_OutlineWidth * _ScaleRatioA) * 0.5) * tmpvar_16);
  lowp float tmpvar_19;
  tmpvar_19 = tmpvar_2.w;
  opacity_6 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.xyz = tmpvar_2.xyz;
  tmpvar_20.w = opacity_6;
  highp vec4 tmpvar_21;
  tmpvar_21 = (tmpvar_20 * _FaceColor);
  faceColor_5 = tmpvar_21;
  outlineColor_4.xyz = _OutlineColor.xyz;
  faceColor_5.xyz = (faceColor_5.xyz * faceColor_5.w);
  highp float tmpvar_22;
  tmpvar_22 = (_OutlineColor.w * opacity_6);
  outlineColor_4.w = tmpvar_22;
  outlineColor_4.xyz = (_OutlineColor.xyz * outlineColor_4.w);
  highp vec4 tmpvar_23;
  tmpvar_23 = mix (faceColor_5, outlineColor_4, vec4(sqrt(min (1.0, 
    (tmpvar_18 * 2.0)
  ))));
  outlineColor_4 = tmpvar_23;
  highp vec4 tmpvar_24;
  tmpvar_24.x = tmpvar_16;
  tmpvar_24.y = (tmpvar_17 - tmpvar_18);
  tmpvar_24.z = (tmpvar_17 + tmpvar_18);
  tmpvar_24.w = tmpvar_17;
  highp vec4 tmpvar_25;
  tmpvar_25.xy = (vert_8.xy - _MaskCoord.xy);
  tmpvar_25.zw = (0.5 / tmpvar_13);
  mediump vec4 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_26 = tmpvar_24;
  tmpvar_27 = tmpvar_25;
  gl_Position = tmpvar_10;
  xlv_COLOR = faceColor_5;
  xlv_COLOR1 = outlineColor_4;
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_26;
  xlv_TEXCOORD2 = tmpvar_27;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
in lowp vec4 xlv_COLOR;
in lowp vec4 xlv_COLOR1;
in highp vec2 xlv_TEXCOORD0;
in mediump vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = texture (_MainTex, xlv_TEXCOORD0);
  mediump float tmpvar_2;
  tmpvar_2 = (tmpvar_1.w * xlv_TEXCOORD1.x);
  mediump float tmpvar_3;
  tmpvar_3 = clamp ((tmpvar_2 - xlv_TEXCOORD1.z), 0.0, 1.0);
  mediump float tmpvar_4;
  tmpvar_4 = clamp ((tmpvar_2 - xlv_TEXCOORD1.y), 0.0, 1.0);
  lowp vec4 tmpvar_5;
  tmpvar_5 = (mix (xlv_COLOR1, xlv_COLOR, vec4(tmpvar_3)) * tmpvar_4);
  _glesFragData[0] = tmpvar_5;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}