Shader "S_Game_Scene/Tower" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" {}
 _MaskTex ("Mask (R,G,B)", 2D) = "white" {}
 _NoiseTex ("Noise(RGB)", 2D) = "white" {}
 _Scroll2X ("Noise speed X", Float) = 1
 _Scroll2Y ("Noise speed Y", Float) = 0
 _NoiseColor ("Noise Color", Color) = (1,1,1,1)
 _MMultiplier ("Layer Multiplier", Float) = 2
}
SubShader { 
 LOD 100
 Tags { "RenderType"="Opaque" }
 Pass {
  Tags { "RenderType"="Opaque" }
  ColorMask RGB
Program "vp" {
SubProgram "gles " {
Keywords { "_DUMMY" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
varying mediump vec4 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.xy = tmpvar_2;
  mediump vec2 tmpvar_3;
  tmpvar_3.x = _Scroll2X;
  tmpvar_3.y = _Scroll2Y;
  highp vec2 tmpvar_4;
  tmpvar_4 = (((_glesMultiTexCoord1.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_3 * _Time.x)));
  tmpvar_1.zw = tmpvar_4;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _NoiseTex;
uniform mediump vec3 _NoiseColor;
uniform mediump float _MMultiplier;
varying mediump vec4 xlv_TEXCOORD0;
void main ()
{
  mediump vec3 noise_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_1 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = ((noise_1 * (tmpvar_3.xyz * _NoiseColor)) * (tmpvar_4.y * _MMultiplier));
  noise_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 + tmpvar_7);
  col_2 = tmpvar_8;
  gl_FragData[0] = col_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
out mediump vec4 xlv_TEXCOORD0;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.xy = tmpvar_2;
  mediump vec2 tmpvar_3;
  tmpvar_3.x = _Scroll2X;
  tmpvar_3.y = _Scroll2Y;
  highp vec2 tmpvar_4;
  tmpvar_4 = (((_glesMultiTexCoord1.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_3 * _Time.x)));
  tmpvar_1.zw = tmpvar_4;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _NoiseTex;
uniform mediump vec3 _NoiseColor;
uniform mediump float _MMultiplier;
in mediump vec4 xlv_TEXCOORD0;
void main ()
{
  mediump vec3 noise_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_1 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = ((noise_1 * (tmpvar_3.xyz * _NoiseColor)) * (tmpvar_4.y * _MMultiplier));
  noise_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 + tmpvar_7);
  col_2 = tmpvar_8;
  _glesFragData[0] = col_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "_FOG_OF_WAR_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
varying mediump vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.xy = tmpvar_2;
  mediump vec2 tmpvar_3;
  tmpvar_3.x = _Scroll2X;
  tmpvar_3.y = _Scroll2Y;
  highp vec2 tmpvar_4;
  tmpvar_4 = (((_glesMultiTexCoord1.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_3 * _Time.x)));
  tmpvar_1.zw = tmpvar_4;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _NoiseTex;
uniform mediump vec3 _NoiseColor;
uniform mediump float _MMultiplier;
varying mediump vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 noise_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_1 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = ((noise_1 * (tmpvar_3.xyz * _NoiseColor)) * (tmpvar_4.y * _MMultiplier));
  noise_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 + tmpvar_7);
  col_2 = tmpvar_8;
  mediump vec3 sceneColor_9;
  sceneColor_9 = col_2.xyz;
  mediump float PointToEyeDist_10;
  mediump float fowLum_11;
  mediump vec2 fowUv_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_12 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture2D (_FogOfWar, fowUv_12).x;
  fowLum_11 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp float tmpvar_16;
  tmpvar_16 = sqrt(dot (tmpvar_15, tmpvar_15));
  PointToEyeDist_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp (((PointToEyeDist_10 * _FOWParams.x) + _FOWParams.y), 0.0, 1.0);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (sceneColor_9 * sceneColor_9);
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (((tmpvar_18 + 
    ((_FOWColor.xyz - tmpvar_18) * (tmpvar_17 * tmpvar_17))
  ) * _FOWParams.z), sceneColor_9, vec3(fowLum_11));
  col_2.xyz = tmpvar_19;
  gl_FragData[0] = col_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_FOG_OF_WAR_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
out mediump vec4 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.xy = tmpvar_2;
  mediump vec2 tmpvar_3;
  tmpvar_3.x = _Scroll2X;
  tmpvar_3.y = _Scroll2Y;
  highp vec2 tmpvar_4;
  tmpvar_4 = (((_glesMultiTexCoord1.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_3 * _Time.x)));
  tmpvar_1.zw = tmpvar_4;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _NoiseTex;
uniform mediump vec3 _NoiseColor;
uniform mediump float _MMultiplier;
in mediump vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 noise_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_1 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = ((noise_1 * (tmpvar_3.xyz * _NoiseColor)) * (tmpvar_4.y * _MMultiplier));
  noise_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 + tmpvar_7);
  col_2 = tmpvar_8;
  mediump vec3 sceneColor_9;
  sceneColor_9 = col_2.xyz;
  mediump float PointToEyeDist_10;
  mediump float fowLum_11;
  mediump vec2 fowUv_12;
  highp vec2 tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_12 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = texture (_FogOfWar, fowUv_12).x;
  fowLum_11 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD1 - _WorldSpaceCameraPos);
  highp float tmpvar_16;
  tmpvar_16 = sqrt(dot (tmpvar_15, tmpvar_15));
  PointToEyeDist_10 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = clamp (((PointToEyeDist_10 * _FOWParams.x) + _FOWParams.y), 0.0, 1.0);
  mediump vec3 tmpvar_18;
  tmpvar_18 = (sceneColor_9 * sceneColor_9);
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (((tmpvar_18 + 
    ((_FOWColor.xyz - tmpvar_18) * (tmpvar_17 * tmpvar_17))
  ) * _FOWParams.z), sceneColor_9, vec3(fowLum_11));
  col_2.xyz = tmpvar_19;
  _glesFragData[0] = col_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "_FOG_OF_WAR_ON_LOW" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
varying mediump vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.xy = tmpvar_2;
  mediump vec2 tmpvar_3;
  tmpvar_3.x = _Scroll2X;
  tmpvar_3.y = _Scroll2Y;
  highp vec2 tmpvar_4;
  tmpvar_4 = (((_glesMultiTexCoord1.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_3 * _Time.x)));
  tmpvar_1.zw = tmpvar_4;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _NoiseTex;
uniform mediump vec3 _NoiseColor;
uniform mediump float _MMultiplier;
varying mediump vec4 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 noise_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_1 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = ((noise_1 * (tmpvar_3.xyz * _NoiseColor)) * (tmpvar_4.y * _MMultiplier));
  noise_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 + tmpvar_7);
  col_2 = tmpvar_8;
  mediump vec3 sceneColor_9;
  sceneColor_9 = col_2.xyz;
  mediump float fowLum_10;
  mediump vec2 fowUv_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_11 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture2D (_FogOfWar, fowUv_11).x;
  fowLum_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (sceneColor_9 * sceneColor_9);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (((tmpvar_14 + 
    ((_FOWColor.xyz - tmpvar_14) * 0.85)
  ) * _FOWParams.z), sceneColor_9, vec3(fowLum_10));
  col_2.xyz = tmpvar_15;
  gl_FragData[0] = col_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_FOG_OF_WAR_ON_LOW" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
in vec4 _glesMultiTexCoord1;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
out mediump vec4 xlv_TEXCOORD0;
out highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec4 tmpvar_1;
  highp vec2 tmpvar_2;
  tmpvar_2 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_1.xy = tmpvar_2;
  mediump vec2 tmpvar_3;
  tmpvar_3.x = _Scroll2X;
  tmpvar_3.y = _Scroll2Y;
  highp vec2 tmpvar_4;
  tmpvar_4 = (((_glesMultiTexCoord1.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_3 * _Time.x)));
  tmpvar_1.zw = tmpvar_4;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_1;
  xlv_TEXCOORD1 = (_Object2World * _glesVertex).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _NoiseTex;
uniform mediump vec3 _NoiseColor;
uniform mediump float _MMultiplier;
in mediump vec4 xlv_TEXCOORD0;
in highp vec3 xlv_TEXCOORD1;
void main ()
{
  mediump vec3 noise_1;
  lowp vec4 col_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_5;
  tmpvar_5 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_1 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = ((noise_1 * (tmpvar_3.xyz * _NoiseColor)) * (tmpvar_4.y * _MMultiplier));
  noise_1 = tmpvar_6;
  mediump vec4 tmpvar_7;
  tmpvar_7.w = 0.0;
  tmpvar_7.xyz = tmpvar_6;
  mediump vec4 tmpvar_8;
  tmpvar_8 = (tmpvar_3 + tmpvar_7);
  col_2 = tmpvar_8;
  mediump vec3 sceneColor_9;
  sceneColor_9 = col_2.xyz;
  mediump float fowLum_10;
  mediump vec2 fowUv_11;
  highp vec2 tmpvar_12;
  tmpvar_12 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_11 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = texture (_FogOfWar, fowUv_11).x;
  fowLum_10 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = (sceneColor_9 * sceneColor_9);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (((tmpvar_14 + 
    ((_FOWColor.xyz - tmpvar_14) * 0.85)
  ) * _FOWParams.z), sceneColor_9, vec3(fowLum_10));
  col_2.xyz = tmpvar_15;
  _glesFragData[0] = col_2;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "_DUMMY" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_FOG_OF_WAR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_FOG_OF_WAR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_FOG_OF_WAR_ON_LOW" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_FOG_OF_WAR_ON_LOW" }
"!!GLES3"
}
}
 }
}
}