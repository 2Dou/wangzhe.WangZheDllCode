Shader "S_Game_Scene/Grass_SWING_NoLightmap" {
Properties {
 _MainTex ("Base (RGB) Gloss (A)", 2D) = "white" {}
 _AlphaTex ("千万不要填，系统用的", 2D) = "white" {}
 _Color ("Main Color", Color) = (1,1,1,1)
 _CutOff ("AlphaTest", Range(0,1.01)) = 0.5
 _MiddleX ("X中值", Float) = 0
 _MiddleZ ("Z中值", Float) = 0
 _XPower ("X方向摆动幅度", Float) = 1
 _ZPower ("Z方向摆动幅度", Float) = 1
 _XSpeed ("X方向摆动速度", Float) = 1
 _ZSpeed ("Z方向摆动速度", Float) = 1
 _YParam ("Y方向变化比例", Float) = 0.4
}
SubShader { 
 LOD 100
 Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "RenderType"="Transparent" }
 Pass {
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="Transparent" "RenderType"="Transparent" }
  Cull Off
Program "vp" {
SubProgram "gles " {
Keywords { "_DUMMY" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  highp float x_2;
  x_2 = (tmpvar_1.w - _CutOff);
  if ((x_2 < 0.0)) {
    discard;
  };
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  highp float x_2;
  x_2 = (tmpvar_1.w - _CutOff);
  if ((x_2 < 0.0)) {
    discard;
  };
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT

uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tex_1.w = tmpvar_2.w;
  highp float x_3;
  x_3 = (tmpvar_2.w - _CutOff);
  if ((x_3 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_4;
  sceneColor_4 = tmpvar_2.xyz;
  mediump float PointToEyeDist_5;
  mediump float fowLum_6;
  mediump vec2 fowUv_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_7 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FogOfWar, fowUv_7).x;
  fowLum_6 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD1.xyz - _WorldSpaceCameraPos);
  highp float tmpvar_11;
  tmpvar_11 = sqrt(dot (tmpvar_10, tmpvar_10));
  PointToEyeDist_5 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((PointToEyeDist_5 * _FOWParams.x) + _FOWParams.y), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (sceneColor_4 * sceneColor_4);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (((tmpvar_13 + 
    ((_FOWColor.xyz - tmpvar_13) * (tmpvar_12 * tmpvar_12))
  ) * _FOWParams.z), sceneColor_4, vec3(fowLum_6));
  tex_1.xyz = tmpvar_14;
  gl_FragData[0] = tex_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  tex_1.w = tmpvar_2.w;
  highp float x_3;
  x_3 = (tmpvar_2.w - _CutOff);
  if ((x_3 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_4;
  sceneColor_4 = tmpvar_2.xyz;
  mediump float PointToEyeDist_5;
  mediump float fowLum_6;
  mediump vec2 fowUv_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_7 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture (_FogOfWar, fowUv_7).x;
  fowLum_6 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD1.xyz - _WorldSpaceCameraPos);
  highp float tmpvar_11;
  tmpvar_11 = sqrt(dot (tmpvar_10, tmpvar_10));
  PointToEyeDist_5 = tmpvar_11;
  mediump float tmpvar_12;
  tmpvar_12 = clamp (((PointToEyeDist_5 * _FOWParams.x) + _FOWParams.y), 0.0, 1.0);
  mediump vec3 tmpvar_13;
  tmpvar_13 = (sceneColor_4 * sceneColor_4);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (((tmpvar_13 + 
    ((_FOWColor.xyz - tmpvar_13) * (tmpvar_12 * tmpvar_12))
  ) * _FOWParams.z), sceneColor_4, vec3(fowLum_6));
  tex_1.xyz = tmpvar_14;
  _glesFragData[0] = tex_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON_LOW" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture2D (_MainTex, xlv_TEXCOORD0) * _Color);
  tex_1.w = tmpvar_2.w;
  highp float x_3;
  x_3 = (tmpvar_2.w - _CutOff);
  if ((x_3 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_4;
  sceneColor_4 = tmpvar_2.xyz;
  mediump float fowLum_5;
  mediump vec2 fowUv_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_6 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2D (_FogOfWar, fowUv_6).x;
  fowLum_5 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (sceneColor_4 * sceneColor_4);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (((tmpvar_9 + 
    ((_FOWColor.xyz - tmpvar_9) * 0.85)
  ) * _FOWParams.z), sceneColor_4, vec3(fowLum_5));
  tex_1.xyz = tmpvar_10;
  gl_FragData[0] = tex_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON_LOW" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (texture (_MainTex, xlv_TEXCOORD0) * _Color);
  tex_1.w = tmpvar_2.w;
  highp float x_3;
  x_3 = (tmpvar_2.w - _CutOff);
  if ((x_3 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_4;
  sceneColor_4 = tmpvar_2.xyz;
  mediump float fowLum_5;
  mediump vec2 fowUv_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_6 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture (_FogOfWar, fowUv_6).x;
  fowLum_5 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (sceneColor_4 * sceneColor_4);
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (((tmpvar_9 + 
    ((_FOWColor.xyz - tmpvar_9) * 0.85)
  ) * _FOWParams.z), sceneColor_4, vec3(fowLum_5));
  tex_1.xyz = tmpvar_10;
  _glesFragData[0] = tex_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_DUMMY" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _AlphaTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
varying highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1.xyz = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  tmpvar_1.w = texture2D (_AlphaTex, xlv_TEXCOORD0).x;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 * _Color);
  highp float x_3;
  x_3 = (tmpvar_2.w - _CutOff);
  if ((x_3 < 0.0)) {
    discard;
  };
  gl_FragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_DUMMY" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
out highp vec2 xlv_TEXCOORD0;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _AlphaTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
in highp vec2 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 tmpvar_1;
  tmpvar_1.xyz = texture (_MainTex, xlv_TEXCOORD0).xyz;
  tmpvar_1.w = texture (_AlphaTex, xlv_TEXCOORD0).x;
  lowp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 * _Color);
  highp float x_3;
  x_3 = (tmpvar_2.w - _CutOff);
  if ((x_3 < 0.0)) {
    discard;
  };
  _glesFragData[0] = tmpvar_2;
}



#endif"
}
SubProgram "gles " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT

uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _AlphaTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  tmpvar_2.w = texture2D (_AlphaTex, xlv_TEXCOORD0).x;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * _Color);
  tex_1.w = tmpvar_3.w;
  highp float x_4;
  x_4 = (tmpvar_3.w - _CutOff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_5;
  sceneColor_5 = tmpvar_3.xyz;
  mediump float PointToEyeDist_6;
  mediump float fowLum_7;
  mediump vec2 fowUv_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_8 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_FogOfWar, fowUv_8).x;
  fowLum_7 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD1.xyz - _WorldSpaceCameraPos);
  highp float tmpvar_12;
  tmpvar_12 = sqrt(dot (tmpvar_11, tmpvar_11));
  PointToEyeDist_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = clamp (((PointToEyeDist_6 * _FOWParams.x) + _FOWParams.y), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (sceneColor_5 * sceneColor_5);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (((tmpvar_14 + 
    ((_FOWColor.xyz - tmpvar_14) * (tmpvar_13 * tmpvar_13))
  ) * _FOWParams.z), sceneColor_5, vec3(fowLum_7));
  tex_1.xyz = tmpvar_15;
  gl_FragData[0] = tex_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp vec3 _WorldSpaceCameraPos;
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _AlphaTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = texture (_MainTex, xlv_TEXCOORD0).xyz;
  tmpvar_2.w = texture (_AlphaTex, xlv_TEXCOORD0).x;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * _Color);
  tex_1.w = tmpvar_3.w;
  highp float x_4;
  x_4 = (tmpvar_3.w - _CutOff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_5;
  sceneColor_5 = tmpvar_3.xyz;
  mediump float PointToEyeDist_6;
  mediump float fowLum_7;
  mediump vec2 fowUv_8;
  highp vec2 tmpvar_9;
  tmpvar_9 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_8 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture (_FogOfWar, fowUv_8).x;
  fowLum_7 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (xlv_TEXCOORD1.xyz - _WorldSpaceCameraPos);
  highp float tmpvar_12;
  tmpvar_12 = sqrt(dot (tmpvar_11, tmpvar_11));
  PointToEyeDist_6 = tmpvar_12;
  mediump float tmpvar_13;
  tmpvar_13 = clamp (((PointToEyeDist_6 * _FOWParams.x) + _FOWParams.y), 0.0, 1.0);
  mediump vec3 tmpvar_14;
  tmpvar_14 = (sceneColor_5 * sceneColor_5);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (((tmpvar_14 + 
    ((_FOWColor.xyz - tmpvar_14) * (tmpvar_13 * tmpvar_13))
  ) * _FOWParams.z), sceneColor_5, vec3(fowLum_7));
  tex_1.xyz = tmpvar_15;
  _glesFragData[0] = tex_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON_LOW" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT

uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _AlphaTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = texture2D (_MainTex, xlv_TEXCOORD0).xyz;
  tmpvar_2.w = texture2D (_AlphaTex, xlv_TEXCOORD0).x;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * _Color);
  tex_1.w = tmpvar_3.w;
  highp float x_4;
  x_4 = (tmpvar_3.w - _CutOff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_5;
  sceneColor_5 = tmpvar_3.xyz;
  mediump float fowLum_6;
  mediump vec2 fowUv_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_7 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture2D (_FogOfWar, fowUv_7).x;
  fowLum_6 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (sceneColor_5 * sceneColor_5);
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (((tmpvar_10 + 
    ((_FOWColor.xyz - tmpvar_10) * 0.85)
  ) * _FOWParams.z), sceneColor_5, vec3(fowLum_6));
  tex_1.xyz = tmpvar_11;
  gl_FragData[0] = tex_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON_LOW" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesColor;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp vec4 _MainTex_ST;
uniform highp float _MiddleX;
uniform highp float _MiddleZ;
uniform highp float _XPower;
uniform highp float _ZPower;
uniform highp float _XSpeed;
uniform highp float _ZSpeed;
uniform highp float _YParam;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
void main ()
{
  highp vec4 modPos_1;
  modPos_1.yw = _glesVertex.yw;
  lowp float cse_2;
  cse_2 = (_glesColor.z * 3.14);
  modPos_1.x = (_glesVertex.x + ((_MiddleX + 
    (sin(((_Time.y * _XSpeed) + cse_2)) * _XPower)
  ) * _glesColor.w));
  modPos_1.z = (_glesVertex.z + ((_MiddleZ + 
    (sin(((_Time.y * _ZSpeed) + cse_2)) * _ZPower)
  ) * _glesColor.w));
  modPos_1.y = (_glesVertex.y - (sqrt(
    (((modPos_1.x - _glesVertex.x) * (modPos_1.x - _glesVertex.x)) + ((modPos_1.z - _glesVertex.z) * (modPos_1.z - _glesVertex.z)))
  ) * _YParam));
  gl_Position = (glstate_matrix_mvp * modPos_1);
  xlv_TEXCOORD0 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  xlv_TEXCOORD1 = (_Object2World * modPos_1);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _FogOfWar;
uniform highp vec4 _InvSceneSize;
uniform mediump vec4 _FOWColor;
uniform mediump vec4 _FOWParams;
uniform sampler2D _MainTex;
uniform sampler2D _AlphaTex;
uniform lowp vec4 _Color;
uniform highp float _CutOff;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
void main ()
{
  lowp vec4 tex_1;
  lowp vec4 tmpvar_2;
  tmpvar_2.xyz = texture (_MainTex, xlv_TEXCOORD0).xyz;
  tmpvar_2.w = texture (_AlphaTex, xlv_TEXCOORD0).x;
  lowp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 * _Color);
  tex_1.w = tmpvar_3.w;
  highp float x_4;
  x_4 = (tmpvar_3.w - _CutOff);
  if ((x_4 < 0.0)) {
    discard;
  };
  mediump vec3 sceneColor_5;
  sceneColor_5 = tmpvar_3.xyz;
  mediump float fowLum_6;
  mediump vec2 fowUv_7;
  highp vec2 tmpvar_8;
  tmpvar_8 = ((xlv_TEXCOORD1.xz * _InvSceneSize.xy) + 0.5);
  fowUv_7 = tmpvar_8;
  lowp float tmpvar_9;
  tmpvar_9 = texture (_FogOfWar, fowUv_7).x;
  fowLum_6 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = (sceneColor_5 * sceneColor_5);
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (((tmpvar_10 + 
    ((_FOWColor.xyz - tmpvar_10) * 0.85)
  ) * _FOWParams.z), sceneColor_5, vec3(fowLum_6));
  tex_1.xyz = tmpvar_11;
  _glesFragData[0] = tex_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "_DUMMY" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON_LOW" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_FOG_OF_WAR_ON_LOW" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_DUMMY" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_DUMMY" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON_LOW" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_SEPERATE_ALPHA_TEX_ON" "_FOG_OF_WAR_ON_LOW" }
"!!GLES3"
}
}
 }
}
}