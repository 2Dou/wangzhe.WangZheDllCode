Shader "SGame/GoldenCard_010100" {
Properties {
[HideInInspector]  _StencilComp ("Stencil Comparison", Float) = 8
[HideInInspector]  _Stencil ("Stencil ID", Float) = 0
[HideInInspector]  _StencilOp ("Stencil Operation", Float) = 0
[HideInInspector]  _StencilWriteMask ("Stencil Write Mask", Float) = 255
[HideInInspector]  _StencilReadMask ("Stencil Read Mask", Float) = 255
[HideInInspector]  _ColorMask ("Color Mask", Float) = 15
 _MainTex ("Base (RGB)", 2D) = "white" {}
 _MaskTex ("Mask", 2D) = "white" {}
 _Fx1_Tex ("Layer1", 2D) = "black" {}
 _Fx2_Tex ("Layer2", 2D) = "black" {}
 _Fx3_Tex ("Layer3", 2D) = "black" {}
 _Fx4_Tex ("Layer4", 2D) = "black" {}
 _Fx1_FlowTex ("Layer1 Flow", 2D) = "black" {}
 _Fx3_FlowTex ("Layer3 Flow", 2D) = "black" {}
 _Seed ("Seed", Float) = 0
 _Fx1_Color ("Layer1 Color", Color) = (1,1,1,1)
 _Fx1_Intensity ("Layer1 Intensity", Float) = 1
 _Fx1_Invert ("Layer1 Invert", Float) = 0
 _Fx1_Distortion ("Layer1 Distortion", Float) = 0
 _Fx1_PusleClip ("Layer1 Pusle Clip", Float) = 0
 _Fx1_PusleRate ("Layer1 Pusle Rate", Float) = 20
 _Fx1_PusleIntensity ("Layer1 Pusle Intensity", Float) = 1
 _Fx1_PusleAmount ("Layer1 Pusle Amount", Float) = 0
 _Fx1_RotSpeed ("Layer1 Rotate Speed", Float) = 0
 _Fx1_RotationX ("Layer1 Rotation X", Float) = 0
 _Fx1_RotationY ("Layer1 Rotation Y", Float) = 0
 _Fx1_ScaleX ("Layer1 Scale X", Float) = 1
 _Fx1_ScaleY ("Layer1 Scale Y", Float) = 1
 _Fx1_ScrollAngle ("Layer1 Scroll Angle", Float) = 0
 _Fx1_ScrollX ("Layer1 Scroll X", Float) = 0
 _Fx1_ScrollY ("Layer1 Scroll Y", Float) = 0
 _Fx1_FlowAngle ("Layer1 Flow Angle", Float) = 0
 _Fx1_FlowOffsetX ("Layer1 Flow Offset X", Float) = 0
 _Fx1_FlowOffsetY ("Layer1 Flow Offset Y", Float) = 0
 _Fx1_FlowScaleX ("Layer1 Flow Scale X", Float) = 1
 _Fx1_FlowScaleY ("Layer1 Flow Scale Y", Float) = 1
 _Fx1_FlowScrollX ("Layer1 Flow Scroll X", Float) = 0
 _Fx1_FlowScrollY ("Layer1 Flow Scroll Y", Float) = 0
 _Fx2_Color ("Layer2 Color", Color) = (1,1,1,1)
 _Fx2_Intensity ("Layer2 Intensity", Float) = 1
 _Fx2_Invert ("Layer2 Invert", Float) = 0
 _Fx2_Blend ("Layer2 Blend", Float) = 0
 _Fx2_Distortion ("Layer2 Distortion", Float) = 0
 _Fx2_PusleClip ("Layer2 Pusle Clip", Float) = 0
 _Fx2_PusleRate ("Layer2 Pusle Rate", Float) = 20
 _Fx2_PusleIntensity ("Layer2 Pusle Intensity", Float) = 1
 _Fx2_PusleAmount ("Layer2 Pusle Amount", Float) = 0
 _Fx2_RotSpeed ("Layer2 Rotate Speed", Float) = 0
 _Fx2_RotationX ("Layer2 Rotation X", Float) = 0
 _Fx2_RotationY ("Layer2 Rotation Y", Float) = 0
 _Fx2_ScaleX ("Layer2 Scale X", Float) = 1
 _Fx2_ScaleY ("Layer2 Scale Y", Float) = 1
 _Fx2_ScrollAngle ("Layer2 Scroll Angle", Float) = 0
 _Fx2_ScrollX ("Layer2 Scroll X", Float) = 0
 _Fx2_ScrollY ("Layer2 Scroll Y", Float) = 0
 _Fx3_Color ("Layer3 Color", Color) = (1,1,1,1)
 _Fx3_Intensity ("Layer3 Intensity", Float) = 1
 _Fx3_Invert ("Layer3 Invert", Float) = 0
 _Fx3_Distortion ("Layer3 Distortion", Float) = 0
 _Fx3_Blend ("Layer3 Blend", Float) = 0
 _Fx3_ColorIntensity ("Layer3 Color Intensity", Float) = 1
 _Fx3_PusleClip ("Layer3 Pusle Clip", Float) = 0
 _Fx3_PusleRate ("Layer3 Pusle Rate", Float) = 20
 _Fx3_PusleIntensity ("Layer3 Pusle Intensity", Float) = 1
 _Fx3_PusleAmount ("Layer3 Pusle Amount", Float) = 0
 _Fx3_RotSpeed ("Layer3 Rotate Speed", Float) = 0
 _Fx3_RotationX ("Layer3 Rotation X", Float) = 0
 _Fx3_RotationY ("Layer3 Rotation Y", Float) = 0
 _Fx3_ScaleX ("Layer3 Scale X", Float) = 1
 _Fx3_ScaleY ("Layer3 Scale Y", Float) = 1
 _Fx3_ScrollAngle ("Layer3 Scroll Angle", Float) = 0
 _Fx3_ScrollX ("Layer3 Scroll X", Float) = 0
 _Fx3_ScrollY ("Layer3 Scroll Y", Float) = 0
 _Fx3_FlowOffsetX ("Layer3 Flow Offset X", Float) = 0
 _Fx3_FlowOffsetY ("Layer3 Flow Offset Y", Float) = 0
 _Fx3_FlowScrollX ("Layer3 Flow Scroll X", Float) = 0
 _Fx3_FlowScrollY ("Layer3 Flow Scroll Y", Float) = 0
 _Fx3_FlowScaleX ("Layer3 Flow Scale X", Float) = 0
 _Fx3_FlowScaleY ("Layer3 Flow Scale Y", Float) = 0
 _Fx4_Color ("Layer4 Color", Color) = (1,1,1,1)
 _Fx4_Intensity ("Layer4 Intensity", Float) = 0
 _Fx4_ColorIntensity ("Layer4 Color Intensity", Float) = 1
 _Fx4_ScaleX ("Layer4 Scale X", Float) = 1
 _Fx4_ScaleY ("Layer4 Scale Y", Float) = 0
 _Fx4_ScrollAngle ("Layer4 Scroll Angle", Float) = 0
 _Fx4_ScrollX ("Layer4 Scroll X", Float) = 0
 _Fx4_ScrollY ("Layer4 Scroll Y", Float) = 0
 _Fx4_PusleClip ("Layer4 Pusle Clip", Float) = 0
 _Fx4_PusleRate ("Layer4 Pusle Rate", Float) = 20
 _Fx4_PusleIntensity ("Layer4 Pusle Intensity", Float) = 1
 _Fx4_PusleAmount ("Layer4 Pusle Amount", Float) = 0
 _FxBrightness ("Brightness", Float) = 0
 _FxIntensity ("Intensity", Float) = 1
 _DistortionVector ("Distortion Vector", Vector) = (1,1,1,1)
}
SubShader { 
 LOD 100
 Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Plane" "CanUseSpriteAtlas"="False" }
 Pass {
  Tags { "QUEUE"="Transparent" "IGNOREPROJECTOR"="true" "RenderType"="Transparent" "PreviewType"="Plane" "CanUseSpriteAtlas"="False" }
  ZTest [unity_GUIZTestMode]
  ZWrite Off
  Cull Off
  Fog { Mode Off }
  Stencil {
   Ref [_Stencil]
   ReadMask [_StencilReadMask]
   WriteMask [_StencilWriteMask]
   Comp [_StencilComp]
   Pass [_StencilOp]
  }
  Blend SrcAlpha OneMinusSrcAlpha
  ColorMask [_ColorMask]
Program "vp" {
SubProgram "gles " {
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp float _Seed;
uniform highp float _Fx1_PusleClip;
uniform highp float _Fx1_PusleRate;
uniform highp float _Fx1_PusleIntensity;
uniform highp float _Fx1_PusleAmount;
uniform highp float _Fx1_ScaleX;
uniform highp float _Fx1_ScaleY;
uniform highp float _Fx1_ScrollAngle;
uniform highp float _Fx1_ScrollX;
uniform highp float _Fx1_ScrollY;
uniform highp float _Fx2_PusleClip;
uniform highp float _Fx2_PusleRate;
uniform highp float _Fx2_PusleIntensity;
uniform highp float _Fx2_PusleAmount;
uniform highp float _Fx2_RotSpeed;
uniform highp float _Fx2_RotationX;
uniform highp float _Fx2_RotationY;
uniform highp float _Fx2_ScaleX;
uniform highp float _Fx2_ScaleY;
uniform highp float _Fx3_PusleClip;
uniform highp float _Fx3_PusleRate;
uniform highp float _Fx3_PusleIntensity;
uniform highp float _Fx3_PusleAmount;
uniform highp float _Fx3_ScaleX;
uniform highp float _Fx3_ScaleY;
uniform highp float _Fx3_ScrollAngle;
uniform highp float _Fx3_ScrollX;
uniform highp float _Fx3_ScrollY;
uniform highp float _Fx3_FlowOffsetX;
uniform highp float _Fx3_FlowOffsetY;
uniform highp float _Fx3_FlowScrollX;
uniform highp float _Fx3_FlowScrollY;
uniform highp float _Fx3_FlowScaleX;
uniform highp float _Fx3_FlowScaleY;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp float tmpvar_1;
  tmpvar_1 = (_Seed + (_Time.y * 0.08));
  highp float tmpvar_2;
  tmpvar_2 = (((
    fract(((_Fx1_ScrollAngle * 0.159155) + 0.5))
   * 2.0) - 1.0) * 3.14159);
  highp vec2 cse_3;
  cse_3 = (_glesMultiTexCoord0.xy - vec2(0.5, 0.5));
  highp float tmpvar_4;
  tmpvar_4 = cos(tmpvar_2);
  highp float tmpvar_5;
  tmpvar_5 = sin(tmpvar_2);
  highp vec2 tmpvar_6;
  tmpvar_6.x = ((cse_3.x * tmpvar_4) + (cse_3.y * tmpvar_5));
  tmpvar_6.y = ((cse_3.y * tmpvar_4) - (cse_3.x * tmpvar_5));
  highp vec2 tmpvar_7;
  tmpvar_7.x = _Fx1_ScrollX;
  tmpvar_7.y = _Fx1_ScrollY;
  highp vec2 tmpvar_8;
  tmpvar_8.x = _Fx1_ScaleX;
  tmpvar_8.y = _Fx1_ScaleY;
  highp vec2 tmpvar_9;
  tmpvar_9.x = _Fx2_RotationX;
  tmpvar_9.y = _Fx2_RotationY;
  highp vec2 tmpvar_10;
  tmpvar_10.x = _Fx2_ScaleX;
  tmpvar_10.y = _Fx2_ScaleY;
  highp float tmpvar_11;
  tmpvar_11 = (((
    fract((((tmpvar_1 * _Fx2_RotSpeed) * 0.159155) + 0.5))
   * 2.0) - 1.0) * 3.14159);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((_glesMultiTexCoord0.xy - (tmpvar_9 + vec2(0.5, 0.5))) * tmpvar_10);
  highp float tmpvar_13;
  tmpvar_13 = cos(tmpvar_11);
  highp float tmpvar_14;
  tmpvar_14 = sin(tmpvar_11);
  highp vec2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_12.x * tmpvar_13) + (tmpvar_12.y * tmpvar_14));
  tmpvar_15.y = ((tmpvar_12.y * tmpvar_13) - (tmpvar_12.x * tmpvar_14));
  highp vec2 tmpvar_16;
  tmpvar_16 = (tmpvar_15 + vec2(0.5, 0.5));
  highp float tmpvar_17;
  tmpvar_17 = (((
    fract(((_Fx3_ScrollAngle * 0.159155) + 0.5))
   * 2.0) - 1.0) * 3.14159);
  highp float tmpvar_18;
  tmpvar_18 = cos(tmpvar_17);
  highp float tmpvar_19;
  tmpvar_19 = sin(tmpvar_17);
  highp vec2 tmpvar_20;
  tmpvar_20.x = ((cse_3.x * tmpvar_18) + (cse_3.y * tmpvar_19));
  tmpvar_20.y = ((cse_3.y * tmpvar_18) - (cse_3.x * tmpvar_19));
  highp vec2 tmpvar_21;
  tmpvar_21.x = _Fx3_ScrollX;
  tmpvar_21.y = _Fx3_ScrollY;
  highp vec2 tmpvar_22;
  tmpvar_22.x = _Fx3_ScaleX;
  tmpvar_22.y = _Fx3_ScaleY;
  highp vec2 tmpvar_23;
  tmpvar_23.x = _Fx3_FlowOffsetX;
  tmpvar_23.y = _Fx3_FlowOffsetY;
  highp vec2 tmpvar_24;
  tmpvar_24.x = _Fx3_FlowScaleX;
  tmpvar_24.y = _Fx3_FlowScaleY;
  highp vec2 tmpvar_25;
  tmpvar_25.x = _Fx3_FlowScrollX;
  tmpvar_25.y = _Fx3_FlowScrollY;
  highp vec2 tmpvar_26;
  tmpvar_26 = (tmpvar_1 * tmpvar_25);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = (((tmpvar_6 + vec2(0.5, 0.5)) + (tmpvar_1 * tmpvar_7)) * tmpvar_8);
  tmpvar_27.z = tmpvar_16.x;
  tmpvar_27.w = tmpvar_16.y;
  highp vec4 tmpvar_28;
  tmpvar_28.xy = (((
    ((tmpvar_20 + vec2(0.5, 0.5)) + (tmpvar_1 * tmpvar_21))
   * tmpvar_22) + tmpvar_23) * tmpvar_24);
  tmpvar_28.z = 0.0;
  tmpvar_28.w = 0.0;
  highp vec4 tmpvar_29;
  tmpvar_29.x = (((
    clamp (((sin(
      (((fract(
        (((tmpvar_1 * _Fx1_PusleRate) * 0.159155) + 0.5)
      ) * 2.0) - 1.0) * 3.14159)
    ) + _Fx1_PusleClip) * _Fx1_PusleIntensity), 0.0, 1.0)
   + -1.0) * _Fx1_PusleAmount) + 1.0);
  tmpvar_29.y = (((
    clamp (((sin(
      (((fract(
        (((tmpvar_1 * _Fx2_PusleRate) * 0.159155) + 0.5)
      ) * 2.0) - 1.0) * 3.14159)
    ) + _Fx2_PusleClip) * _Fx2_PusleIntensity), 0.0, 1.0)
   + -1.0) * _Fx2_PusleAmount) + 1.0);
  tmpvar_29.z = (((
    clamp (((sin(
      (((fract(
        (((tmpvar_1 * _Fx3_PusleRate) * 0.159155) + 0.5)
      ) * 2.0) - 1.0) * 3.14159)
    ) + _Fx3_PusleClip) * _Fx3_PusleIntensity), 0.0, 1.0)
   + -1.0) * _Fx3_PusleAmount) + 1.0);
  tmpvar_29.w = 0.0;
  highp vec4 tmpvar_30;
  tmpvar_30.x = 0.0;
  tmpvar_30.y = 0.0;
  tmpvar_30.z = tmpvar_26.x;
  tmpvar_30.w = tmpvar_26.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
  xlv_TEXCOORD1 = tmpvar_27;
  xlv_TEXCOORD2 = tmpvar_28;
  xlv_TEXCOORD3 = tmpvar_29;
  xlv_TEXCOORD4 = tmpvar_30;
}



#endif
#ifdef FRAGMENT

uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _Fx1_Tex;
uniform sampler2D _Fx2_Tex;
uniform sampler2D _Fx3_Tex;
uniform sampler2D _Fx3_FlowTex;
uniform highp vec4 _Fx1_Color;
uniform highp float _Fx1_Intensity;
uniform highp float _Fx1_Invert;
uniform highp float _Fx1_Distortion;
uniform highp vec4 _Fx2_Color;
uniform highp float _Fx2_Intensity;
uniform highp float _Fx2_Invert;
uniform highp float _Fx2_Blend;
uniform highp float _Fx2_Distortion;
uniform highp vec4 _Fx3_Color;
uniform highp float _Fx3_Intensity;
uniform highp float _Fx3_Invert;
uniform highp float _Fx3_Distortion;
uniform highp float _Fx3_Blend;
uniform highp float _Fx3_ScaleX;
uniform highp float _Fx3_ScaleY;
uniform highp float _FxBrightness;
uniform highp float _FxIntensity;
uniform highp vec2 _DistortionVector;
varying highp vec2 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying highp vec4 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 mainColor_2;
  highp vec3 color_layer3_3;
  highp vec3 flow3_4;
  highp vec3 color_layer2_5;
  highp vec3 color_layer1_6;
  highp vec4 mask_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0);
  mask_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_Fx1_Tex, xlv_TEXCOORD1.xy).xyz;
  color_layer1_6 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = abs((vec3(_Fx1_Invert) - color_layer1_6));
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_Fx1_Color.xyz * (
    ((_Fx1_Color.w * _Fx1_Intensity) * mask_7.x)
   * xlv_TEXCOORD3.x)));
  color_layer1_6 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_Fx2_Tex, xlv_TEXCOORD1.zw).xyz;
  color_layer2_5 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs((vec3(_Fx2_Invert) - color_layer2_5));
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_Fx2_Color.xyz * (
    ((_Fx2_Color.w * _Fx2_Intensity) * mask_7.y)
   * xlv_TEXCOORD3.y)));
  color_layer2_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture2D (_Fx3_FlowTex, xlv_TEXCOORD2.xy).xyz;
  flow3_4 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _Fx3_ScaleX;
  tmpvar_16.y = _Fx3_ScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((flow3_4.xy * tmpvar_16) + xlv_TEXCOORD4.zw);
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_Fx3_Tex, tmpvar_17).xyz;
  color_layer3_3 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = abs((vec3(_Fx3_Invert) - color_layer3_3));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (_Fx3_Color.xyz * (
    ((_Fx3_Color.w * _Fx3_Intensity) * mask_7.z)
   * xlv_TEXCOORD3.z)));
  color_layer3_3 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD0 + ((
    ((((tmpvar_10.x - 0.5) * mask_7.x) * _Fx1_Distortion) + (((tmpvar_13.x - 0.5) * mask_7.y) * _Fx2_Distortion))
   + 
    (((tmpvar_19.x - 0.5) * mask_7.z) * _Fx3_Distortion)
  ) * _DistortionVector));
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture2D (_MainTex, tmpvar_21);
  mainColor_2 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_11 + tmpvar_14) * 0.5);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_23, ((tmpvar_11 * tmpvar_14) - tmpvar_23), vec3(_Fx2_Blend));
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = clamp (((
    clamp (((mask_7.x + mask_7.y) + mask_7.z), 0.0, 1.0)
   * 
    (mix (((tmpvar_24 + tmpvar_20) * 0.5), (tmpvar_24 * tmpvar_20), vec3(_Fx3_Blend)) + (_FxIntensity * _FxBrightness))
  ) + mainColor_2.xyz), 0.0, 1.0);
  tmpvar_25.w = mainColor_2.w;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec4 _glesMultiTexCoord0;
uniform highp vec4 _Time;
uniform highp mat4 glstate_matrix_mvp;
uniform highp float _Seed;
uniform highp float _Fx1_PusleClip;
uniform highp float _Fx1_PusleRate;
uniform highp float _Fx1_PusleIntensity;
uniform highp float _Fx1_PusleAmount;
uniform highp float _Fx1_ScaleX;
uniform highp float _Fx1_ScaleY;
uniform highp float _Fx1_ScrollAngle;
uniform highp float _Fx1_ScrollX;
uniform highp float _Fx1_ScrollY;
uniform highp float _Fx2_PusleClip;
uniform highp float _Fx2_PusleRate;
uniform highp float _Fx2_PusleIntensity;
uniform highp float _Fx2_PusleAmount;
uniform highp float _Fx2_RotSpeed;
uniform highp float _Fx2_RotationX;
uniform highp float _Fx2_RotationY;
uniform highp float _Fx2_ScaleX;
uniform highp float _Fx2_ScaleY;
uniform highp float _Fx3_PusleClip;
uniform highp float _Fx3_PusleRate;
uniform highp float _Fx3_PusleIntensity;
uniform highp float _Fx3_PusleAmount;
uniform highp float _Fx3_ScaleX;
uniform highp float _Fx3_ScaleY;
uniform highp float _Fx3_ScrollAngle;
uniform highp float _Fx3_ScrollX;
uniform highp float _Fx3_ScrollY;
uniform highp float _Fx3_FlowOffsetX;
uniform highp float _Fx3_FlowOffsetY;
uniform highp float _Fx3_FlowScrollX;
uniform highp float _Fx3_FlowScrollY;
uniform highp float _Fx3_FlowScaleX;
uniform highp float _Fx3_FlowScaleY;
out highp vec2 xlv_TEXCOORD0;
out highp vec4 xlv_TEXCOORD1;
out highp vec4 xlv_TEXCOORD2;
out highp vec4 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
void main ()
{
  highp float tmpvar_1;
  tmpvar_1 = (_Seed + (_Time.y * 0.08));
  highp float tmpvar_2;
  tmpvar_2 = (((
    fract(((_Fx1_ScrollAngle * 0.159155) + 0.5))
   * 2.0) - 1.0) * 3.14159);
  highp vec2 cse_3;
  cse_3 = (_glesMultiTexCoord0.xy - vec2(0.5, 0.5));
  highp float tmpvar_4;
  tmpvar_4 = cos(tmpvar_2);
  highp float tmpvar_5;
  tmpvar_5 = sin(tmpvar_2);
  highp vec2 tmpvar_6;
  tmpvar_6.x = ((cse_3.x * tmpvar_4) + (cse_3.y * tmpvar_5));
  tmpvar_6.y = ((cse_3.y * tmpvar_4) - (cse_3.x * tmpvar_5));
  highp vec2 tmpvar_7;
  tmpvar_7.x = _Fx1_ScrollX;
  tmpvar_7.y = _Fx1_ScrollY;
  highp vec2 tmpvar_8;
  tmpvar_8.x = _Fx1_ScaleX;
  tmpvar_8.y = _Fx1_ScaleY;
  highp vec2 tmpvar_9;
  tmpvar_9.x = _Fx2_RotationX;
  tmpvar_9.y = _Fx2_RotationY;
  highp vec2 tmpvar_10;
  tmpvar_10.x = _Fx2_ScaleX;
  tmpvar_10.y = _Fx2_ScaleY;
  highp float tmpvar_11;
  tmpvar_11 = (((
    fract((((tmpvar_1 * _Fx2_RotSpeed) * 0.159155) + 0.5))
   * 2.0) - 1.0) * 3.14159);
  highp vec2 tmpvar_12;
  tmpvar_12 = ((_glesMultiTexCoord0.xy - (tmpvar_9 + vec2(0.5, 0.5))) * tmpvar_10);
  highp float tmpvar_13;
  tmpvar_13 = cos(tmpvar_11);
  highp float tmpvar_14;
  tmpvar_14 = sin(tmpvar_11);
  highp vec2 tmpvar_15;
  tmpvar_15.x = ((tmpvar_12.x * tmpvar_13) + (tmpvar_12.y * tmpvar_14));
  tmpvar_15.y = ((tmpvar_12.y * tmpvar_13) - (tmpvar_12.x * tmpvar_14));
  highp vec2 tmpvar_16;
  tmpvar_16 = (tmpvar_15 + vec2(0.5, 0.5));
  highp float tmpvar_17;
  tmpvar_17 = (((
    fract(((_Fx3_ScrollAngle * 0.159155) + 0.5))
   * 2.0) - 1.0) * 3.14159);
  highp float tmpvar_18;
  tmpvar_18 = cos(tmpvar_17);
  highp float tmpvar_19;
  tmpvar_19 = sin(tmpvar_17);
  highp vec2 tmpvar_20;
  tmpvar_20.x = ((cse_3.x * tmpvar_18) + (cse_3.y * tmpvar_19));
  tmpvar_20.y = ((cse_3.y * tmpvar_18) - (cse_3.x * tmpvar_19));
  highp vec2 tmpvar_21;
  tmpvar_21.x = _Fx3_ScrollX;
  tmpvar_21.y = _Fx3_ScrollY;
  highp vec2 tmpvar_22;
  tmpvar_22.x = _Fx3_ScaleX;
  tmpvar_22.y = _Fx3_ScaleY;
  highp vec2 tmpvar_23;
  tmpvar_23.x = _Fx3_FlowOffsetX;
  tmpvar_23.y = _Fx3_FlowOffsetY;
  highp vec2 tmpvar_24;
  tmpvar_24.x = _Fx3_FlowScaleX;
  tmpvar_24.y = _Fx3_FlowScaleY;
  highp vec2 tmpvar_25;
  tmpvar_25.x = _Fx3_FlowScrollX;
  tmpvar_25.y = _Fx3_FlowScrollY;
  highp vec2 tmpvar_26;
  tmpvar_26 = (tmpvar_1 * tmpvar_25);
  highp vec4 tmpvar_27;
  tmpvar_27.xy = (((tmpvar_6 + vec2(0.5, 0.5)) + (tmpvar_1 * tmpvar_7)) * tmpvar_8);
  tmpvar_27.z = tmpvar_16.x;
  tmpvar_27.w = tmpvar_16.y;
  highp vec4 tmpvar_28;
  tmpvar_28.xy = (((
    ((tmpvar_20 + vec2(0.5, 0.5)) + (tmpvar_1 * tmpvar_21))
   * tmpvar_22) + tmpvar_23) * tmpvar_24);
  tmpvar_28.z = 0.0;
  tmpvar_28.w = 0.0;
  highp vec4 tmpvar_29;
  tmpvar_29.x = (((
    clamp (((sin(
      (((fract(
        (((tmpvar_1 * _Fx1_PusleRate) * 0.159155) + 0.5)
      ) * 2.0) - 1.0) * 3.14159)
    ) + _Fx1_PusleClip) * _Fx1_PusleIntensity), 0.0, 1.0)
   + -1.0) * _Fx1_PusleAmount) + 1.0);
  tmpvar_29.y = (((
    clamp (((sin(
      (((fract(
        (((tmpvar_1 * _Fx2_PusleRate) * 0.159155) + 0.5)
      ) * 2.0) - 1.0) * 3.14159)
    ) + _Fx2_PusleClip) * _Fx2_PusleIntensity), 0.0, 1.0)
   + -1.0) * _Fx2_PusleAmount) + 1.0);
  tmpvar_29.z = (((
    clamp (((sin(
      (((fract(
        (((tmpvar_1 * _Fx3_PusleRate) * 0.159155) + 0.5)
      ) * 2.0) - 1.0) * 3.14159)
    ) + _Fx3_PusleClip) * _Fx3_PusleIntensity), 0.0, 1.0)
   + -1.0) * _Fx3_PusleAmount) + 1.0);
  tmpvar_29.w = 0.0;
  highp vec4 tmpvar_30;
  tmpvar_30.x = 0.0;
  tmpvar_30.y = 0.0;
  tmpvar_30.z = tmpvar_26.x;
  tmpvar_30.w = tmpvar_26.y;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = _glesMultiTexCoord0.xy;
  xlv_TEXCOORD1 = tmpvar_27;
  xlv_TEXCOORD2 = tmpvar_28;
  xlv_TEXCOORD3 = tmpvar_29;
  xlv_TEXCOORD4 = tmpvar_30;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _Fx1_Tex;
uniform sampler2D _Fx2_Tex;
uniform sampler2D _Fx3_Tex;
uniform sampler2D _Fx3_FlowTex;
uniform highp vec4 _Fx1_Color;
uniform highp float _Fx1_Intensity;
uniform highp float _Fx1_Invert;
uniform highp float _Fx1_Distortion;
uniform highp vec4 _Fx2_Color;
uniform highp float _Fx2_Intensity;
uniform highp float _Fx2_Invert;
uniform highp float _Fx2_Blend;
uniform highp float _Fx2_Distortion;
uniform highp vec4 _Fx3_Color;
uniform highp float _Fx3_Intensity;
uniform highp float _Fx3_Invert;
uniform highp float _Fx3_Distortion;
uniform highp float _Fx3_Blend;
uniform highp float _Fx3_ScaleX;
uniform highp float _Fx3_ScaleY;
uniform highp float _FxBrightness;
uniform highp float _FxIntensity;
uniform highp vec2 _DistortionVector;
in highp vec2 xlv_TEXCOORD0;
in highp vec4 xlv_TEXCOORD1;
in highp vec4 xlv_TEXCOORD2;
in highp vec4 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 tmpvar_1;
  highp vec4 mainColor_2;
  highp vec3 color_layer3_3;
  highp vec3 flow3_4;
  highp vec3 color_layer2_5;
  highp vec3 color_layer1_6;
  highp vec4 mask_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0);
  mask_7 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture (_Fx1_Tex, xlv_TEXCOORD1.xy).xyz;
  color_layer1_6 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = abs((vec3(_Fx1_Invert) - color_layer1_6));
  highp vec3 tmpvar_11;
  tmpvar_11 = (tmpvar_10 * (_Fx1_Color.xyz * (
    ((_Fx1_Color.w * _Fx1_Intensity) * mask_7.x)
   * xlv_TEXCOORD3.x)));
  color_layer1_6 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture (_Fx2_Tex, xlv_TEXCOORD1.zw).xyz;
  color_layer2_5 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = abs((vec3(_Fx2_Invert) - color_layer2_5));
  highp vec3 tmpvar_14;
  tmpvar_14 = (tmpvar_13 * (_Fx2_Color.xyz * (
    ((_Fx2_Color.w * _Fx2_Intensity) * mask_7.y)
   * xlv_TEXCOORD3.y)));
  color_layer2_5 = tmpvar_14;
  lowp vec3 tmpvar_15;
  tmpvar_15 = texture (_Fx3_FlowTex, xlv_TEXCOORD2.xy).xyz;
  flow3_4 = tmpvar_15;
  highp vec2 tmpvar_16;
  tmpvar_16.x = _Fx3_ScaleX;
  tmpvar_16.y = _Fx3_ScaleY;
  highp vec2 tmpvar_17;
  tmpvar_17 = ((flow3_4.xy * tmpvar_16) + xlv_TEXCOORD4.zw);
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture (_Fx3_Tex, tmpvar_17).xyz;
  color_layer3_3 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = abs((vec3(_Fx3_Invert) - color_layer3_3));
  highp vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_19 * (_Fx3_Color.xyz * (
    ((_Fx3_Color.w * _Fx3_Intensity) * mask_7.z)
   * xlv_TEXCOORD3.z)));
  color_layer3_3 = tmpvar_20;
  highp vec2 tmpvar_21;
  tmpvar_21 = (xlv_TEXCOORD0 + ((
    ((((tmpvar_10.x - 0.5) * mask_7.x) * _Fx1_Distortion) + (((tmpvar_13.x - 0.5) * mask_7.y) * _Fx2_Distortion))
   + 
    (((tmpvar_19.x - 0.5) * mask_7.z) * _Fx3_Distortion)
  ) * _DistortionVector));
  lowp vec4 tmpvar_22;
  tmpvar_22 = texture (_MainTex, tmpvar_21);
  mainColor_2 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((tmpvar_11 + tmpvar_14) * 0.5);
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (tmpvar_23, ((tmpvar_11 * tmpvar_14) - tmpvar_23), vec3(_Fx2_Blend));
  highp vec4 tmpvar_25;
  tmpvar_25.xyz = clamp (((
    clamp (((mask_7.x + mask_7.y) + mask_7.z), 0.0, 1.0)
   * 
    (mix (((tmpvar_24 + tmpvar_20) * 0.5), (tmpvar_24 * tmpvar_20), vec3(_Fx3_Blend)) + (_FxIntensity * _FxBrightness))
  ) + mainColor_2.xyz), 0.0, 1.0);
  tmpvar_25.w = mainColor_2.w;
  tmpvar_1 = tmpvar_25;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
}
 }
}
}