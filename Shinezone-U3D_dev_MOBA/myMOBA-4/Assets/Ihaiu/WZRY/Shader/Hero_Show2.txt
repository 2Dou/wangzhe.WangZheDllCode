Shader "S_Game_Hero/Hero_Show2" {
Properties {
 _MainTex ("Base (RGB)", 2D) = "white" {}
 _MaskTex ("Mask (R,G,B)", 2D) = "white" {}
 _SpecColor ("Spec Color", Color) = (0,0,0,0)
 _SpecPower ("Spec Power", Range(1,128)) = 15
 _SpecMultiplier ("Spec Multiplier", Float) = 1
 _RampMap ("Ramp Map", 2D) = "white" {}
 _ShadowColor ("Shadow Color", Color) = (0,0,0,0)
 _LightTex ("轮廓光 (RGB)", 2D) = "white" {}
 _NormalTex ("Normal", 2D) = "bump" {}
 _NoiseTex ("Noise(RGB)", 2D) = "white" {}
 _Scroll2X ("Noise speed X", Float) = 1
 _Scroll2Y ("Noise speed Y", Float) = 0
 _NoiseColor ("Noise Color", Color) = (1,1,1,1)
 _MMultiplier ("Layer Multiplier", Float) = 2
 _ReflectTex ("Reflect(RGB)", 2D) = "white" {}
 _ReflectColor ("Reflect Color", Color) = (1,1,1,1)
 _ReflectPower ("Reflect Power", Range(0.1,5)) = 1
 _ReflectionMultiplier ("Reflection Multiplier", Float) = 2
 _Offset ("Height", Float) = 0.8
 _HeightColor ("Height Color", Color) = (0.5,0.5,0.5,1)
 _HeightLightCompensation ("Height Light Compensation", Float) = 1
}
SubShader { 
 LOD 200
 Tags { "RenderType"="Opaque" "HeroShader"="1" }
 Pass {
  Tags { "RenderType"="Opaque" "HeroShader"="1" }
  Fog { Mode Off }
Program "vp" {
SubProgram "gles " {
Keywords { "_DUMMY" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  mediump vec3 color_9;
  mediump vec3 ramp_10;
  highp float nh_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_11 = tmpvar_14;
  lowp vec2 tmpvar_15;
  tmpvar_15.y = 0.5;
  tmpvar_15.x = diff_12;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_RampMap, tmpvar_15).xyz;
  ramp_10 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = ((_SpecColor * (
    ((pow (nh_11, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_10 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_9 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = color_9;
  tmpvar_18.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_18;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  mediump vec3 color_9;
  mediump vec3 ramp_10;
  highp float nh_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_11 = tmpvar_14;
  lowp vec2 tmpvar_15;
  tmpvar_15.y = 0.5;
  tmpvar_15.x = diff_12;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture (_RampMap, tmpvar_15).xyz;
  ramp_10 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = ((_SpecColor * (
    ((pow (nh_11, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_10 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_9 = tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.xyz = color_9;
  tmpvar_18.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_18;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  mediump vec3 color_9;
  mediump vec3 ramp_10;
  highp float nh_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_11 = tmpvar_14;
  lowp vec2 tmpvar_15;
  tmpvar_15.y = 0.5;
  tmpvar_15.x = diff_12;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture2D (_RampMap, tmpvar_15).xyz;
  ramp_10 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = ((_SpecColor * (
    ((pow (nh_11, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_10 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = clamp (((color_9 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = tmpvar_18;
  tmpvar_20.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  mediump vec3 color_9;
  mediump vec3 ramp_10;
  highp float nh_11;
  lowp float diff_12;
  mediump float tmpvar_13;
  tmpvar_13 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_12 = tmpvar_13;
  mediump float tmpvar_14;
  tmpvar_14 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_11 = tmpvar_14;
  lowp vec2 tmpvar_15;
  tmpvar_15.y = 0.5;
  tmpvar_15.x = diff_12;
  lowp vec3 tmpvar_16;
  tmpvar_16 = texture (_RampMap, tmpvar_15).xyz;
  ramp_10 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = ((_SpecColor * (
    ((pow (nh_11, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_10 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_9 = tmpvar_17;
  mediump vec3 tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = clamp (((color_9 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_18 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = tmpvar_18;
  tmpvar_20.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_20;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  lowp float tmpvar_9;
  highp vec3 coord_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_10.xy = tmpvar_11.xy;
  coord_10.z = (tmpvar_11.z - 0.00025);
  highp vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SGameShadowTexture, tmpvar_11.xy);
  c_12 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp ((2.0 - exp(
    ((coord_10.z - dot (c_12, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_10.xy = (tmpvar_11.xy + vec2(0.000976563, 0.000976563));
  tmpvar_9 = ((tmpvar_14 * 0.5) + 0.5);
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    (((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_9)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_15 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix ((tmpvar_7 * _ShadowColor.xyz), color_15, vec3(tmpvar_9));
  tmpvar_24.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  lowp float tmpvar_9;
  highp vec3 coord_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_10.xy = tmpvar_11.xy;
  coord_10.z = (tmpvar_11.z - 0.00025);
  highp vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_SGameShadowTexture, tmpvar_11.xy);
  c_12 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp ((2.0 - exp(
    ((coord_10.z - dot (c_12, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_10.xy = (tmpvar_11.xy + vec2(0.000976563, 0.000976563));
  tmpvar_9 = ((tmpvar_14 * 0.5) + 0.5);
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    (((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_9)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_15 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = mix ((tmpvar_7 * _ShadowColor.xyz), color_15, vec3(tmpvar_9));
  tmpvar_24.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_24;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  lowp float tmpvar_9;
  highp vec3 coord_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_10.xy = tmpvar_11.xy;
  coord_10.z = (tmpvar_11.z - 0.00025);
  highp vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_SGameShadowTexture, tmpvar_11.xy);
  c_12 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp ((2.0 - exp(
    ((coord_10.z - dot (c_12, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_10.xy = (tmpvar_11.xy + vec2(0.000976563, 0.000976563));
  tmpvar_9 = ((tmpvar_14 * 0.5) + 0.5);
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    (((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_9)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_15 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_7 * _ShadowColor.xyz), color_15, vec3(tmpvar_9));
  mediump vec3 tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = clamp (((tmpvar_24 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_6;
  tmpvar_6 = ((tmpvar_5.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7 = (albedo_3 + tmpvar_5.xyz);
  albedo_3 = tmpvar_7;
  lowp float tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_8;
  lowp float tmpvar_9;
  highp vec3 coord_10;
  highp vec3 tmpvar_11;
  tmpvar_11 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_10.xy = tmpvar_11.xy;
  coord_10.z = (tmpvar_11.z - 0.00025);
  highp vec4 c_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_SGameShadowTexture, tmpvar_11.xy);
  c_12 = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = clamp ((2.0 - exp(
    ((coord_10.z - dot (c_12, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_10.xy = (tmpvar_11.xy + vec2(0.000976563, 0.000976563));
  tmpvar_9 = ((tmpvar_14 * 0.5) + 0.5);
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    (((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_9)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_7));
  color_15 = tmpvar_23;
  mediump vec3 tmpvar_24;
  tmpvar_24 = mix ((tmpvar_7 * _ShadowColor.xyz), color_15, vec3(tmpvar_9));
  mediump vec3 tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = clamp (((tmpvar_24 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = tmpvar_5.w;
  tmpvar_1 = tmpvar_27;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  mediump vec3 color_14;
  mediump vec3 ramp_15;
  highp float nh_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_16 = tmpvar_19;
  lowp vec2 tmpvar_20;
  tmpvar_20.y = 0.5;
  tmpvar_20.x = diff_17;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_RampMap, tmpvar_20).xyz;
  ramp_15 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = ((_SpecColor * (
    ((pow (nh_16, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_15 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_14 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = color_14;
  tmpvar_23.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_23;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  mediump vec3 color_14;
  mediump vec3 ramp_15;
  highp float nh_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_16 = tmpvar_19;
  lowp vec2 tmpvar_20;
  tmpvar_20.y = 0.5;
  tmpvar_20.x = diff_17;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture (_RampMap, tmpvar_20).xyz;
  ramp_15 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = ((_SpecColor * (
    ((pow (nh_16, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_15 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_14 = tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.xyz = color_14;
  tmpvar_23.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_23;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  mediump vec3 color_14;
  mediump vec3 ramp_15;
  highp float nh_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_16 = tmpvar_19;
  lowp vec2 tmpvar_20;
  tmpvar_20.y = 0.5;
  tmpvar_20.x = diff_17;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture2D (_RampMap, tmpvar_20).xyz;
  ramp_15 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = ((_SpecColor * (
    ((pow (nh_16, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_15 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_14 = tmpvar_22;
  mediump vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = clamp (((color_14 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_23;
  tmpvar_25.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  mediump vec3 color_14;
  mediump vec3 ramp_15;
  highp float nh_16;
  lowp float diff_17;
  mediump float tmpvar_18;
  tmpvar_18 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_16 = tmpvar_19;
  lowp vec2 tmpvar_20;
  tmpvar_20.y = 0.5;
  tmpvar_20.x = diff_17;
  lowp vec3 tmpvar_21;
  tmpvar_21 = texture (_RampMap, tmpvar_20).xyz;
  ramp_15 = tmpvar_21;
  highp vec3 tmpvar_22;
  tmpvar_22 = ((_SpecColor * (
    ((pow (nh_16, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_15 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_14 = tmpvar_22;
  mediump vec3 tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = clamp (((color_14 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_23 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = tmpvar_23;
  tmpvar_25.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_25;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  lowp float tmpvar_14;
  highp vec3 coord_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_15.xy = tmpvar_16.xy;
  coord_15.z = (tmpvar_16.z - 0.00025);
  highp vec4 c_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_SGameShadowTexture, tmpvar_16.xy);
  c_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp ((2.0 - exp(
    ((coord_15.z - dot (c_17, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_15.xy = (tmpvar_16.xy + vec2(0.000976563, 0.000976563));
  tmpvar_14 = ((tmpvar_19 * 0.5) + 0.5);
  mediump vec3 color_20;
  mediump vec3 ramp_21;
  highp float nh_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_22 = tmpvar_25;
  lowp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = diff_23;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_RampMap, tmpvar_26).xyz;
  ramp_21 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = ((_SpecColor * (
    (((pow (nh_22, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_14)
   * 2.0)) + ((ramp_21 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_20 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = mix ((tmpvar_12 * _ShadowColor.xyz), color_20, vec3(tmpvar_14));
  tmpvar_29.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  lowp float tmpvar_14;
  highp vec3 coord_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_15.xy = tmpvar_16.xy;
  coord_15.z = (tmpvar_16.z - 0.00025);
  highp vec4 c_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_SGameShadowTexture, tmpvar_16.xy);
  c_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp ((2.0 - exp(
    ((coord_15.z - dot (c_17, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_15.xy = (tmpvar_16.xy + vec2(0.000976563, 0.000976563));
  tmpvar_14 = ((tmpvar_19 * 0.5) + 0.5);
  mediump vec3 color_20;
  mediump vec3 ramp_21;
  highp float nh_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_22 = tmpvar_25;
  lowp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = diff_23;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture (_RampMap, tmpvar_26).xyz;
  ramp_21 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = ((_SpecColor * (
    (((pow (nh_22, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_14)
   * 2.0)) + ((ramp_21 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_20 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = mix ((tmpvar_12 * _ShadowColor.xyz), color_20, vec3(tmpvar_14));
  tmpvar_29.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_29;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  lowp float tmpvar_14;
  highp vec3 coord_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_15.xy = tmpvar_16.xy;
  coord_15.z = (tmpvar_16.z - 0.00025);
  highp vec4 c_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_SGameShadowTexture, tmpvar_16.xy);
  c_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp ((2.0 - exp(
    ((coord_15.z - dot (c_17, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_15.xy = (tmpvar_16.xy + vec2(0.000976563, 0.000976563));
  tmpvar_14 = ((tmpvar_19 * 0.5) + 0.5);
  mediump vec3 color_20;
  mediump vec3 ramp_21;
  highp float nh_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_22 = tmpvar_25;
  lowp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = diff_23;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture2D (_RampMap, tmpvar_26).xyz;
  ramp_21 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = ((_SpecColor * (
    (((pow (nh_22, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_14)
   * 2.0)) + ((ramp_21 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_20 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_12 * _ShadowColor.xyz), color_20, vec3(tmpvar_14));
  mediump vec3 tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = clamp (((tmpvar_29 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_30;
  tmpvar_32.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec2 tmpvar_4;
  mediump vec3 cse_5;
  cse_5 = normalize(xlv_TEXCOORD1);
  tmpvar_4 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_4) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_6.xyz);
  mediump vec2 tmpvar_10;
  tmpvar_10 = ((cse_5.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture (_ReflectTex, tmpvar_10);
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (tmpvar_9, ((tmpvar_9 * 
    pow ((tmpvar_11.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_7.zzz);
  albedo_3 = tmpvar_12;
  lowp float tmpvar_13;
  tmpvar_13 = tmpvar_7.x;
  gloss_2 = tmpvar_13;
  lowp float tmpvar_14;
  highp vec3 coord_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_15.xy = tmpvar_16.xy;
  coord_15.z = (tmpvar_16.z - 0.00025);
  highp vec4 c_17;
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture (_SGameShadowTexture, tmpvar_16.xy);
  c_17 = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = clamp ((2.0 - exp(
    ((coord_15.z - dot (c_17, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_15.xy = (tmpvar_16.xy + vec2(0.000976563, 0.000976563));
  tmpvar_14 = ((tmpvar_19 * 0.5) + 0.5);
  mediump vec3 color_20;
  mediump vec3 ramp_21;
  highp float nh_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_23 = tmpvar_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_22 = tmpvar_25;
  lowp vec2 tmpvar_26;
  tmpvar_26.y = 0.5;
  tmpvar_26.x = diff_23;
  lowp vec3 tmpvar_27;
  tmpvar_27 = texture (_RampMap, tmpvar_26).xyz;
  ramp_21 = tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = ((_SpecColor * (
    (((pow (nh_22, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_14)
   * 2.0)) + ((ramp_21 + vec3(0.5, 0.5, 0.5)) * tmpvar_12));
  color_20 = tmpvar_28;
  mediump vec3 tmpvar_29;
  tmpvar_29 = mix ((tmpvar_12 * _ShadowColor.xyz), color_20, vec3(tmpvar_14));
  mediump vec3 tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = clamp (((tmpvar_29 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_30 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = tmpvar_30;
  tmpvar_32.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_32;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 ramp_14;
  highp float nh_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_15 = tmpvar_18;
  lowp vec2 tmpvar_19;
  tmpvar_19.y = 0.5;
  tmpvar_19.x = diff_16;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_RampMap, tmpvar_19).xyz;
  ramp_14 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = ((_SpecColor * (
    ((pow (nh_15, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_14 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_13 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = color_13;
  tmpvar_22.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 ramp_14;
  highp float nh_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_15 = tmpvar_18;
  lowp vec2 tmpvar_19;
  tmpvar_19.y = 0.5;
  tmpvar_19.x = diff_16;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture (_RampMap, tmpvar_19).xyz;
  ramp_14 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = ((_SpecColor * (
    ((pow (nh_15, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_14 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_13 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = color_13;
  tmpvar_22.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_22;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 ramp_14;
  highp float nh_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_15 = tmpvar_18;
  lowp vec2 tmpvar_19;
  tmpvar_19.y = 0.5;
  tmpvar_19.x = diff_16;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture2D (_RampMap, tmpvar_19).xyz;
  ramp_14 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = ((_SpecColor * (
    ((pow (nh_15, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_14 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_13 = tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = clamp (((color_13 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  mediump vec3 color_13;
  mediump vec3 ramp_14;
  highp float nh_15;
  lowp float diff_16;
  mediump float tmpvar_17;
  tmpvar_17 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_15 = tmpvar_18;
  lowp vec2 tmpvar_19;
  tmpvar_19.y = 0.5;
  tmpvar_19.x = diff_16;
  lowp vec3 tmpvar_20;
  tmpvar_20 = texture (_RampMap, tmpvar_19).xyz;
  ramp_14 = tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = ((_SpecColor * (
    ((pow (nh_15, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_14 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_13 = tmpvar_21;
  mediump vec3 tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = clamp (((color_13 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_22 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = tmpvar_22;
  tmpvar_24.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_24;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  lowp float tmpvar_13;
  highp vec3 coord_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_14.xy = tmpvar_15.xy;
  coord_14.z = (tmpvar_15.z - 0.00025);
  highp vec4 c_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_SGameShadowTexture, tmpvar_15.xy);
  c_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp ((2.0 - exp(
    ((coord_14.z - dot (c_16, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_14.xy = (tmpvar_15.xy + vec2(0.000976563, 0.000976563));
  tmpvar_13 = ((tmpvar_18 * 0.5) + 0.5);
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    (((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_13)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_19 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = mix ((tmpvar_11 * _ShadowColor.xyz), color_19, vec3(tmpvar_13));
  tmpvar_28.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  lowp float tmpvar_13;
  highp vec3 coord_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_14.xy = tmpvar_15.xy;
  coord_14.z = (tmpvar_15.z - 0.00025);
  highp vec4 c_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_SGameShadowTexture, tmpvar_15.xy);
  c_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp ((2.0 - exp(
    ((coord_14.z - dot (c_16, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_14.xy = (tmpvar_15.xy + vec2(0.000976563, 0.000976563));
  tmpvar_13 = ((tmpvar_18 * 0.5) + 0.5);
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    (((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_13)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_19 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = mix ((tmpvar_11 * _ShadowColor.xyz), color_19, vec3(tmpvar_13));
  tmpvar_28.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_28;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  lowp float tmpvar_13;
  highp vec3 coord_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_14.xy = tmpvar_15.xy;
  coord_14.z = (tmpvar_15.z - 0.00025);
  highp vec4 c_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_SGameShadowTexture, tmpvar_15.xy);
  c_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp ((2.0 - exp(
    ((coord_14.z - dot (c_16, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_14.xy = (tmpvar_15.xy + vec2(0.000976563, 0.000976563));
  tmpvar_13 = ((tmpvar_18 * 0.5) + 0.5);
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    (((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_13)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_19 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_11 * _ShadowColor.xyz), color_19, vec3(tmpvar_13));
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_28 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_29;
  tmpvar_31.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_6.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_8;
  lowp vec3 tmpvar_9;
  tmpvar_9 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10 = ((noise_3 * (tmpvar_6.xyz * _NoiseColor)) * (tmpvar_7.y * _MMultiplier));
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((albedo_4 + tmpvar_6.xyz) + tmpvar_10);
  albedo_4 = tmpvar_11;
  lowp float tmpvar_12;
  tmpvar_12 = tmpvar_7.x;
  gloss_2 = tmpvar_12;
  lowp float tmpvar_13;
  highp vec3 coord_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_14.xy = tmpvar_15.xy;
  coord_14.z = (tmpvar_15.z - 0.00025);
  highp vec4 c_16;
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture (_SGameShadowTexture, tmpvar_15.xy);
  c_16 = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = clamp ((2.0 - exp(
    ((coord_14.z - dot (c_16, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_14.xy = (tmpvar_15.xy + vec2(0.000976563, 0.000976563));
  tmpvar_13 = ((tmpvar_18 * 0.5) + 0.5);
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    (((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_13)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_11));
  color_19 = tmpvar_27;
  mediump vec3 tmpvar_28;
  tmpvar_28 = mix ((tmpvar_11 * _ShadowColor.xyz), color_19, vec3(tmpvar_13));
  mediump vec3 tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = clamp (((tmpvar_28 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_29 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = tmpvar_29;
  tmpvar_31.w = tmpvar_6.w;
  tmpvar_1 = tmpvar_31;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    ((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_17 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = color_17;
  tmpvar_26.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    ((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_17 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = color_17;
  tmpvar_26.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_26;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    ((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_17 = tmpvar_25;
  mediump vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = clamp (((color_17 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_26;
  tmpvar_28.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    ((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_17 = tmpvar_25;
  mediump vec3 tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = clamp (((color_17 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_26 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = tmpvar_26;
  tmpvar_28.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_28;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  lowp float tmpvar_17;
  highp vec3 coord_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_18.xy = tmpvar_19.xy;
  coord_18.z = (tmpvar_19.z - 0.00025);
  highp vec4 c_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SGameShadowTexture, tmpvar_19.xy);
  c_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp ((2.0 - exp(
    ((coord_18.z - dot (c_20, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_18.xy = (tmpvar_19.xy + vec2(0.000976563, 0.000976563));
  tmpvar_17 = ((tmpvar_22 * 0.5) + 0.5);
  mediump vec3 color_23;
  mediump vec3 ramp_24;
  highp float nh_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_26 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_25 = tmpvar_28;
  lowp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = diff_26;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_RampMap, tmpvar_29).xyz;
  ramp_24 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((_SpecColor * (
    (((pow (nh_25, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_17)
   * 2.0)) + ((ramp_24 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_23 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = mix ((tmpvar_15 * _ShadowColor.xyz), color_23, vec3(tmpvar_17));
  tmpvar_32.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_32;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  lowp float tmpvar_17;
  highp vec3 coord_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_18.xy = tmpvar_19.xy;
  coord_18.z = (tmpvar_19.z - 0.00025);
  highp vec4 c_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture (_SGameShadowTexture, tmpvar_19.xy);
  c_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp ((2.0 - exp(
    ((coord_18.z - dot (c_20, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_18.xy = (tmpvar_19.xy + vec2(0.000976563, 0.000976563));
  tmpvar_17 = ((tmpvar_22 * 0.5) + 0.5);
  mediump vec3 color_23;
  mediump vec3 ramp_24;
  highp float nh_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_26 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_25 = tmpvar_28;
  lowp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = diff_26;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture (_RampMap, tmpvar_29).xyz;
  ramp_24 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((_SpecColor * (
    (((pow (nh_25, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_17)
   * 2.0)) + ((ramp_24 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_23 = tmpvar_31;
  mediump vec4 tmpvar_32;
  tmpvar_32.xyz = mix ((tmpvar_15 * _ShadowColor.xyz), color_23, vec3(tmpvar_17));
  tmpvar_32.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_32;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  lowp float tmpvar_17;
  highp vec3 coord_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_18.xy = tmpvar_19.xy;
  coord_18.z = (tmpvar_19.z - 0.00025);
  highp vec4 c_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_SGameShadowTexture, tmpvar_19.xy);
  c_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp ((2.0 - exp(
    ((coord_18.z - dot (c_20, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_18.xy = (tmpvar_19.xy + vec2(0.000976563, 0.000976563));
  tmpvar_17 = ((tmpvar_22 * 0.5) + 0.5);
  mediump vec3 color_23;
  mediump vec3 ramp_24;
  highp float nh_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_26 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_25 = tmpvar_28;
  lowp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = diff_26;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture2D (_RampMap, tmpvar_29).xyz;
  ramp_24 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((_SpecColor * (
    (((pow (nh_25, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_17)
   * 2.0)) + ((ramp_24 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_23 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = mix ((tmpvar_15 * _ShadowColor.xyz), color_23, vec3(tmpvar_17));
  mediump vec3 tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_32 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = tmpvar_33;
  tmpvar_35.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_35;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_4 = tmpvar_9;
  lowp vec3 tmpvar_10;
  tmpvar_10 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = ((noise_3 * (tmpvar_7.xyz * _NoiseColor)) * (tmpvar_8.y * _MMultiplier));
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((albedo_4 + tmpvar_7.xyz) + tmpvar_11);
  mediump vec2 tmpvar_13;
  tmpvar_13 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture (_ReflectTex, tmpvar_13);
  mediump vec3 tmpvar_15;
  tmpvar_15 = mix (tmpvar_12, ((tmpvar_12 * 
    pow ((tmpvar_14.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_8.zzz);
  albedo_4 = tmpvar_15;
  lowp float tmpvar_16;
  tmpvar_16 = tmpvar_8.x;
  gloss_2 = tmpvar_16;
  lowp float tmpvar_17;
  highp vec3 coord_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_18.xy = tmpvar_19.xy;
  coord_18.z = (tmpvar_19.z - 0.00025);
  highp vec4 c_20;
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture (_SGameShadowTexture, tmpvar_19.xy);
  c_20 = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = clamp ((2.0 - exp(
    ((coord_18.z - dot (c_20, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_18.xy = (tmpvar_19.xy + vec2(0.000976563, 0.000976563));
  tmpvar_17 = ((tmpvar_22 * 0.5) + 0.5);
  mediump vec3 color_23;
  mediump vec3 ramp_24;
  highp float nh_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = ((xlv_TEXCOORD3.z * 0.5) + 0.5);
  diff_26 = tmpvar_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, normalize((xlv_TEXCOORD3 + xlv_TEXCOORD2)).z);
  nh_25 = tmpvar_28;
  lowp vec2 tmpvar_29;
  tmpvar_29.y = 0.5;
  tmpvar_29.x = diff_26;
  lowp vec3 tmpvar_30;
  tmpvar_30 = texture (_RampMap, tmpvar_29).xyz;
  ramp_24 = tmpvar_30;
  highp vec3 tmpvar_31;
  tmpvar_31 = ((_SpecColor * (
    (((pow (nh_25, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_17)
   * 2.0)) + ((ramp_24 + vec3(0.5, 0.5, 0.5)) * tmpvar_15));
  color_23 = tmpvar_31;
  mediump vec3 tmpvar_32;
  tmpvar_32 = mix ((tmpvar_15 * _ShadowColor.xyz), color_23, vec3(tmpvar_17));
  mediump vec3 tmpvar_33;
  highp vec3 tmpvar_34;
  tmpvar_34 = clamp (((tmpvar_32 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_33 = tmpvar_34;
  mediump vec4 tmpvar_35;
  tmpvar_35.xyz = tmpvar_33;
  tmpvar_35.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_35;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  mediump vec3 color_11;
  mediump vec3 ramp_12;
  highp float nh_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_13 = tmpvar_16;
  lowp vec2 tmpvar_17;
  tmpvar_17.y = 0.5;
  tmpvar_17.x = diff_14;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_RampMap, tmpvar_17).xyz;
  ramp_12 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = ((_SpecColor * (
    ((pow (nh_13, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_12 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_11 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = color_11;
  tmpvar_20.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_20;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  mediump vec3 color_11;
  mediump vec3 ramp_12;
  highp float nh_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_13 = tmpvar_16;
  lowp vec2 tmpvar_17;
  tmpvar_17.y = 0.5;
  tmpvar_17.x = diff_14;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture (_RampMap, tmpvar_17).xyz;
  ramp_12 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = ((_SpecColor * (
    ((pow (nh_13, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_12 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_11 = tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.xyz = color_11;
  tmpvar_20.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_20;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  mediump vec3 color_11;
  mediump vec3 ramp_12;
  highp float nh_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_13 = tmpvar_16;
  lowp vec2 tmpvar_17;
  tmpvar_17.y = 0.5;
  tmpvar_17.x = diff_14;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture2D (_RampMap, tmpvar_17).xyz;
  ramp_12 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = ((_SpecColor * (
    ((pow (nh_13, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_12 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_11 = tmpvar_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = clamp (((color_11 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_22;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  mediump vec3 color_11;
  mediump vec3 ramp_12;
  highp float nh_13;
  lowp float diff_14;
  mediump float tmpvar_15;
  tmpvar_15 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_13 = tmpvar_16;
  lowp vec2 tmpvar_17;
  tmpvar_17.y = 0.5;
  tmpvar_17.x = diff_14;
  lowp vec3 tmpvar_18;
  tmpvar_18 = texture (_RampMap, tmpvar_17).xyz;
  ramp_12 = tmpvar_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = ((_SpecColor * (
    ((pow (nh_13, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_12 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_11 = tmpvar_19;
  mediump vec3 tmpvar_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = clamp (((color_11 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_20 = tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.xyz = tmpvar_20;
  tmpvar_22.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_22;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  lowp float tmpvar_11;
  highp vec3 coord_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_12.xy = tmpvar_13.xy;
  coord_12.z = (tmpvar_13.z - 0.00025);
  highp vec4 c_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_SGameShadowTexture, tmpvar_13.xy);
  c_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp ((2.0 - exp(
    ((coord_12.z - dot (c_14, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_12.xy = (tmpvar_13.xy + vec2(0.000976563, 0.000976563));
  tmpvar_11 = ((tmpvar_16 * 0.5) + 0.5);
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    (((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_11)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_17 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = mix ((tmpvar_9 * _ShadowColor.xyz), color_17, vec3(tmpvar_11));
  tmpvar_26.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  lowp float tmpvar_11;
  highp vec3 coord_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_12.xy = tmpvar_13.xy;
  coord_12.z = (tmpvar_13.z - 0.00025);
  highp vec4 c_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_SGameShadowTexture, tmpvar_13.xy);
  c_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp ((2.0 - exp(
    ((coord_12.z - dot (c_14, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_12.xy = (tmpvar_13.xy + vec2(0.000976563, 0.000976563));
  tmpvar_11 = ((tmpvar_16 * 0.5) + 0.5);
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    (((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_11)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_17 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = mix ((tmpvar_9 * _ShadowColor.xyz), color_17, vec3(tmpvar_11));
  tmpvar_26.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_26;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  lowp float tmpvar_11;
  highp vec3 coord_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_12.xy = tmpvar_13.xy;
  coord_12.z = (tmpvar_13.z - 0.00025);
  highp vec4 c_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_SGameShadowTexture, tmpvar_13.xy);
  c_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp ((2.0 - exp(
    ((coord_12.z - dot (c_14, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_12.xy = (tmpvar_13.xy + vec2(0.000976563, 0.000976563));
  tmpvar_11 = ((tmpvar_16 * 0.5) + 0.5);
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture2D (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    (((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_11)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_17 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_9 * _ShadowColor.xyz), color_17, vec3(tmpvar_11));
  mediump vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_26 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_29;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_6;
  tmpvar_6 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_8;
  tmpvar_8 = ((tmpvar_7.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = (albedo_3 + tmpvar_7.xyz);
  albedo_3 = tmpvar_9;
  lowp float tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy).x;
  gloss_2 = tmpvar_10;
  lowp float tmpvar_11;
  highp vec3 coord_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_12.xy = tmpvar_13.xy;
  coord_12.z = (tmpvar_13.z - 0.00025);
  highp vec4 c_14;
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture (_SGameShadowTexture, tmpvar_13.xy);
  c_14 = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = clamp ((2.0 - exp(
    ((coord_12.z - dot (c_14, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_12.xy = (tmpvar_13.xy + vec2(0.000976563, 0.000976563));
  tmpvar_11 = ((tmpvar_16 * 0.5) + 0.5);
  mediump vec3 color_17;
  mediump vec3 ramp_18;
  highp float nh_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_20 = tmpvar_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_19 = tmpvar_22;
  lowp vec2 tmpvar_23;
  tmpvar_23.y = 0.5;
  tmpvar_23.x = diff_20;
  lowp vec3 tmpvar_24;
  tmpvar_24 = texture (_RampMap, tmpvar_23).xyz;
  ramp_18 = tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = ((_SpecColor * (
    (((pow (nh_19, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_11)
   * 2.0)) + ((ramp_18 + vec3(0.5, 0.5, 0.5)) * tmpvar_9));
  color_17 = tmpvar_25;
  mediump vec3 tmpvar_26;
  tmpvar_26 = mix ((tmpvar_9 * _ShadowColor.xyz), color_17, vec3(tmpvar_11));
  mediump vec3 tmpvar_27;
  highp vec3 tmpvar_28;
  tmpvar_28 = clamp (((tmpvar_26 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_27 = tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.xyz = tmpvar_27;
  tmpvar_29.w = tmpvar_7.w;
  tmpvar_1 = tmpvar_29;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 ramp_17;
  highp float nh_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_18 = tmpvar_21;
  lowp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = diff_19;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_RampMap, tmpvar_22).xyz;
  ramp_17 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_SpecColor * (
    ((pow (nh_18, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_17 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_16 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = color_16;
  tmpvar_25.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_25;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_2);
  highp vec3 tmpvar_12;
  tmpvar_12 = (((tmpvar_11.yzx * tmpvar_10.zxy) - (tmpvar_11.zxy * tmpvar_10.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_13;
  tmpvar_13[0].x = tmpvar_10.x;
  tmpvar_13[0].y = tmpvar_12.x;
  tmpvar_13[0].z = tmpvar_11.x;
  tmpvar_13[1].x = tmpvar_10.y;
  tmpvar_13[1].y = tmpvar_12.y;
  tmpvar_13[1].z = tmpvar_11.y;
  tmpvar_13[2].x = tmpvar_10.z;
  tmpvar_13[2].y = tmpvar_12.z;
  tmpvar_13[2].z = tmpvar_11.z;
  highp vec4 tmpvar_14;
  tmpvar_14.w = 0.0;
  tmpvar_14.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((tmpvar_13 * (_World2Object * tmpvar_14).xyz));
  tmpvar_5 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_13 * (_World2Object * tmpvar_16).xyz));
  tmpvar_6 = tmpvar_17;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 ramp_17;
  highp float nh_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_18 = tmpvar_21;
  lowp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = diff_19;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture (_RampMap, tmpvar_22).xyz;
  ramp_17 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_SpecColor * (
    ((pow (nh_18, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_17 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_16 = tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.xyz = color_16;
  tmpvar_25.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_25;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 ramp_17;
  highp float nh_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_18 = tmpvar_21;
  lowp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = diff_19;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture2D (_RampMap, tmpvar_22).xyz;
  ramp_17 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_SpecColor * (
    ((pow (nh_18, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_17 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_16 = tmpvar_24;
  mediump vec3 tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = clamp (((color_16 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_27;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  mediump vec3 color_16;
  mediump vec3 ramp_17;
  highp float nh_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_18 = tmpvar_21;
  lowp vec2 tmpvar_22;
  tmpvar_22.y = 0.5;
  tmpvar_22.x = diff_19;
  lowp vec3 tmpvar_23;
  tmpvar_23 = texture (_RampMap, tmpvar_22).xyz;
  ramp_17 = tmpvar_23;
  highp vec3 tmpvar_24;
  tmpvar_24 = ((_SpecColor * (
    ((pow (nh_18, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_17 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_16 = tmpvar_24;
  mediump vec3 tmpvar_25;
  highp vec3 tmpvar_26;
  tmpvar_26 = clamp (((color_16 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_25 = tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.xyz = tmpvar_25;
  tmpvar_27.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_27;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  lowp float tmpvar_16;
  highp vec3 coord_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_17.xy = tmpvar_18.xy;
  coord_17.z = (tmpvar_18.z - 0.00025);
  highp vec4 c_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SGameShadowTexture, tmpvar_18.xy);
  c_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp ((2.0 - exp(
    ((coord_17.z - dot (c_19, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_17.xy = (tmpvar_18.xy + vec2(0.000976563, 0.000976563));
  tmpvar_16 = ((tmpvar_21 * 0.5) + 0.5);
  mediump vec3 color_22;
  mediump vec3 ramp_23;
  highp float nh_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_24 = tmpvar_27;
  lowp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = diff_25;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_RampMap, tmpvar_28).xyz;
  ramp_23 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = ((_SpecColor * (
    (((pow (nh_24, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_16)
   * 2.0)) + ((ramp_23 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_22 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = mix ((tmpvar_14 * _ShadowColor.xyz), color_22, vec3(tmpvar_16));
  tmpvar_31.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_31;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_11;
  tmpvar_11 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_2);
  highp vec3 tmpvar_13;
  tmpvar_13 = (((tmpvar_12.yzx * tmpvar_11.zxy) - (tmpvar_12.zxy * tmpvar_11.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_14;
  tmpvar_14[0].x = tmpvar_11.x;
  tmpvar_14[0].y = tmpvar_13.x;
  tmpvar_14[0].z = tmpvar_12.x;
  tmpvar_14[1].x = tmpvar_11.y;
  tmpvar_14[1].y = tmpvar_13.y;
  tmpvar_14[1].z = tmpvar_12.y;
  tmpvar_14[2].x = tmpvar_11.z;
  tmpvar_14[2].y = tmpvar_13.z;
  tmpvar_14[2].z = tmpvar_12.z;
  highp vec4 tmpvar_15;
  tmpvar_15.w = 0.0;
  tmpvar_15.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((tmpvar_14 * (_World2Object * tmpvar_15).xyz));
  tmpvar_5 = tmpvar_16;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_14 * (_World2Object * tmpvar_17).xyz));
  tmpvar_6 = tmpvar_18;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  lowp float tmpvar_16;
  highp vec3 coord_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_17.xy = tmpvar_18.xy;
  coord_17.z = (tmpvar_18.z - 0.00025);
  highp vec4 c_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_SGameShadowTexture, tmpvar_18.xy);
  c_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp ((2.0 - exp(
    ((coord_17.z - dot (c_19, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_17.xy = (tmpvar_18.xy + vec2(0.000976563, 0.000976563));
  tmpvar_16 = ((tmpvar_21 * 0.5) + 0.5);
  mediump vec3 color_22;
  mediump vec3 ramp_23;
  highp float nh_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_24 = tmpvar_27;
  lowp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = diff_25;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture (_RampMap, tmpvar_28).xyz;
  ramp_23 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = ((_SpecColor * (
    (((pow (nh_24, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_16)
   * 2.0)) + ((ramp_23 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_22 = tmpvar_30;
  mediump vec4 tmpvar_31;
  tmpvar_31.xyz = mix ((tmpvar_14 * _ShadowColor.xyz), color_22, vec3(tmpvar_16));
  tmpvar_31.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_31;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  lowp float tmpvar_16;
  highp vec3 coord_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_17.xy = tmpvar_18.xy;
  coord_17.z = (tmpvar_18.z - 0.00025);
  highp vec4 c_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture2D (_SGameShadowTexture, tmpvar_18.xy);
  c_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp ((2.0 - exp(
    ((coord_17.z - dot (c_19, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_17.xy = (tmpvar_18.xy + vec2(0.000976563, 0.000976563));
  tmpvar_16 = ((tmpvar_21 * 0.5) + 0.5);
  mediump vec3 color_22;
  mediump vec3 ramp_23;
  highp float nh_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_24 = tmpvar_27;
  lowp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = diff_25;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture2D (_RampMap, tmpvar_28).xyz;
  ramp_23 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = ((_SpecColor * (
    (((pow (nh_24, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_16)
   * 2.0)) + ((ramp_23 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_22 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_14 * _ShadowColor.xyz), color_22, vec3(tmpvar_16));
  mediump vec3 tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = clamp (((tmpvar_31 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = tmpvar_32;
  tmpvar_34.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  tmpvar_3.zw = tmpvar_3.xy;
  highp vec4 tmpvar_8;
  tmpvar_8.w = 0.0;
  tmpvar_8.xyz = tmpvar_2;
  highp vec3 tmpvar_9;
  tmpvar_9 = (glstate_matrix_modelview0 * tmpvar_8).xyz;
  tmpvar_4 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_11;
  tmpvar_11.w = 0.0;
  tmpvar_11.xyz = tmpvar_2;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - tmpvar_10.xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_10);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 albedo_3;
  mediump vec3 normalTS_4;
  mediump vec2 tmpvar_5;
  mediump vec3 cse_6;
  cse_6 = normalize(xlv_TEXCOORD1);
  tmpvar_5 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_4 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_5) * 1.2).xyz);
  albedo_3 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = (albedo_3 + tmpvar_8.xyz);
  mediump vec2 tmpvar_12;
  tmpvar_12 = ((cse_6.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture (_ReflectTex, tmpvar_12);
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (tmpvar_11, ((tmpvar_11 * 
    pow ((tmpvar_13.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_9.zzz);
  albedo_3 = tmpvar_14;
  lowp float tmpvar_15;
  tmpvar_15 = tmpvar_9.x;
  gloss_2 = tmpvar_15;
  lowp float tmpvar_16;
  highp vec3 coord_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_17.xy = tmpvar_18.xy;
  coord_17.z = (tmpvar_18.z - 0.00025);
  highp vec4 c_19;
  lowp vec4 tmpvar_20;
  tmpvar_20 = texture (_SGameShadowTexture, tmpvar_18.xy);
  c_19 = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = clamp ((2.0 - exp(
    ((coord_17.z - dot (c_19, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_17.xy = (tmpvar_18.xy + vec2(0.000976563, 0.000976563));
  tmpvar_16 = ((tmpvar_21 * 0.5) + 0.5);
  mediump vec3 color_22;
  mediump vec3 ramp_23;
  highp float nh_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = ((dot (normalTS_4, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_25 = tmpvar_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (normalTS_4, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_24 = tmpvar_27;
  lowp vec2 tmpvar_28;
  tmpvar_28.y = 0.5;
  tmpvar_28.x = diff_25;
  lowp vec3 tmpvar_29;
  tmpvar_29 = texture (_RampMap, tmpvar_28).xyz;
  ramp_23 = tmpvar_29;
  highp vec3 tmpvar_30;
  tmpvar_30 = ((_SpecColor * (
    (((pow (nh_24, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_16)
   * 2.0)) + ((ramp_23 + vec3(0.5, 0.5, 0.5)) * tmpvar_14));
  color_22 = tmpvar_30;
  mediump vec3 tmpvar_31;
  tmpvar_31 = mix ((tmpvar_14 * _ShadowColor.xyz), color_22, vec3(tmpvar_16));
  mediump vec3 tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = clamp (((tmpvar_31 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_32 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = tmpvar_32;
  tmpvar_34.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_34;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    ((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_15 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = color_15;
  tmpvar_24.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_24;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    ((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_15 = tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.xyz = color_15;
  tmpvar_24.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_24;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture2D (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    ((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_15 = tmpvar_23;
  mediump vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = clamp (((color_15 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = tmpvar_24;
  tmpvar_26.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_26;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  mediump vec3 color_15;
  mediump vec3 ramp_16;
  highp float nh_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_17 = tmpvar_20;
  lowp vec2 tmpvar_21;
  tmpvar_21.y = 0.5;
  tmpvar_21.x = diff_18;
  lowp vec3 tmpvar_22;
  tmpvar_22 = texture (_RampMap, tmpvar_21).xyz;
  ramp_16 = tmpvar_22;
  highp vec3 tmpvar_23;
  tmpvar_23 = ((_SpecColor * (
    ((pow (nh_17, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_16 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_15 = tmpvar_23;
  mediump vec3 tmpvar_24;
  highp vec3 tmpvar_25;
  tmpvar_25 = clamp (((color_15 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_24 = tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.xyz = tmpvar_24;
  tmpvar_26.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_26;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  lowp float tmpvar_15;
  highp vec3 coord_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_16.xy = tmpvar_17.xy;
  coord_16.z = (tmpvar_17.z - 0.00025);
  highp vec4 c_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SGameShadowTexture, tmpvar_17.xy);
  c_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp ((2.0 - exp(
    ((coord_16.z - dot (c_18, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_16.xy = (tmpvar_17.xy + vec2(0.000976563, 0.000976563));
  tmpvar_15 = ((tmpvar_20 * 0.5) + 0.5);
  mediump vec3 color_21;
  mediump vec3 ramp_22;
  highp float nh_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_23 = tmpvar_26;
  lowp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = diff_24;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_RampMap, tmpvar_27).xyz;
  ramp_22 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = ((_SpecColor * (
    (((pow (nh_23, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_15)
   * 2.0)) + ((ramp_22 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_21 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.xyz = mix ((tmpvar_13 * _ShadowColor.xyz), color_21, vec3(tmpvar_15));
  tmpvar_30.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  lowp float tmpvar_15;
  highp vec3 coord_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_16.xy = tmpvar_17.xy;
  coord_16.z = (tmpvar_17.z - 0.00025);
  highp vec4 c_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_SGameShadowTexture, tmpvar_17.xy);
  c_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp ((2.0 - exp(
    ((coord_16.z - dot (c_18, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_16.xy = (tmpvar_17.xy + vec2(0.000976563, 0.000976563));
  tmpvar_15 = ((tmpvar_20 * 0.5) + 0.5);
  mediump vec3 color_21;
  mediump vec3 ramp_22;
  highp float nh_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_23 = tmpvar_26;
  lowp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = diff_24;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture (_RampMap, tmpvar_27).xyz;
  ramp_22 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = ((_SpecColor * (
    (((pow (nh_23, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_15)
   * 2.0)) + ((ramp_22 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_21 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.xyz = mix ((tmpvar_13 * _ShadowColor.xyz), color_21, vec3(tmpvar_15));
  tmpvar_30.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_30;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  lowp float tmpvar_15;
  highp vec3 coord_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_16.xy = tmpvar_17.xy;
  coord_16.z = (tmpvar_17.z - 0.00025);
  highp vec4 c_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_SGameShadowTexture, tmpvar_17.xy);
  c_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp ((2.0 - exp(
    ((coord_16.z - dot (c_18, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_16.xy = (tmpvar_17.xy + vec2(0.000976563, 0.000976563));
  tmpvar_15 = ((tmpvar_20 * 0.5) + 0.5);
  mediump vec3 color_21;
  mediump vec3 ramp_22;
  highp float nh_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_23 = tmpvar_26;
  lowp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = diff_24;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture2D (_RampMap, tmpvar_27).xyz;
  ramp_22 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = ((_SpecColor * (
    (((pow (nh_23, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_15)
   * 2.0)) + ((ramp_22 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_21 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_13 * _ShadowColor.xyz), color_21, vec3(tmpvar_15));
  mediump vec3 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = clamp (((tmpvar_30 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = tmpvar_31;
  tmpvar_33.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_33;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = ((normalize(xlv_TEXCOORD1).xy * 0.5) + 0.5);
  lowp vec3 tmpvar_7;
  tmpvar_7 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((tmpvar_8.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_10;
  lowp vec3 tmpvar_11;
  tmpvar_11 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = ((noise_3 * (tmpvar_8.xyz * _NoiseColor)) * (tmpvar_9.y * _MMultiplier));
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((albedo_4 + tmpvar_8.xyz) + tmpvar_12);
  albedo_4 = tmpvar_13;
  lowp float tmpvar_14;
  tmpvar_14 = tmpvar_9.x;
  gloss_2 = tmpvar_14;
  lowp float tmpvar_15;
  highp vec3 coord_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_16.xy = tmpvar_17.xy;
  coord_16.z = (tmpvar_17.z - 0.00025);
  highp vec4 c_18;
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture (_SGameShadowTexture, tmpvar_17.xy);
  c_18 = tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = clamp ((2.0 - exp(
    ((coord_16.z - dot (c_18, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_16.xy = (tmpvar_17.xy + vec2(0.000976563, 0.000976563));
  tmpvar_15 = ((tmpvar_20 * 0.5) + 0.5);
  mediump vec3 color_21;
  mediump vec3 ramp_22;
  highp float nh_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_24 = tmpvar_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_23 = tmpvar_26;
  lowp vec2 tmpvar_27;
  tmpvar_27.y = 0.5;
  tmpvar_27.x = diff_24;
  lowp vec3 tmpvar_28;
  tmpvar_28 = texture (_RampMap, tmpvar_27).xyz;
  ramp_22 = tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = ((_SpecColor * (
    (((pow (nh_23, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_15)
   * 2.0)) + ((ramp_22 + vec3(0.5, 0.5, 0.5)) * tmpvar_13));
  color_21 = tmpvar_29;
  mediump vec3 tmpvar_30;
  tmpvar_30 = mix ((tmpvar_13 * _ShadowColor.xyz), color_21, vec3(tmpvar_15));
  mediump vec3 tmpvar_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = clamp (((tmpvar_30 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_31 = tmpvar_32;
  mediump vec4 tmpvar_33;
  tmpvar_33.xyz = tmpvar_31;
  tmpvar_33.w = tmpvar_8.w;
  tmpvar_1 = tmpvar_33;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    ((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_19 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = color_19;
  tmpvar_28.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_28;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_2);
  highp vec3 tmpvar_14;
  tmpvar_14 = (((tmpvar_13.yzx * tmpvar_12.zxy) - (tmpvar_13.zxy * tmpvar_12.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_15;
  tmpvar_15[0].x = tmpvar_12.x;
  tmpvar_15[0].y = tmpvar_14.x;
  tmpvar_15[0].z = tmpvar_13.x;
  tmpvar_15[1].x = tmpvar_12.y;
  tmpvar_15[1].y = tmpvar_14.y;
  tmpvar_15[1].z = tmpvar_13.y;
  tmpvar_15[2].x = tmpvar_12.z;
  tmpvar_15[2].y = tmpvar_14.z;
  tmpvar_15[2].z = tmpvar_13.z;
  highp vec4 tmpvar_16;
  tmpvar_16.w = 0.0;
  tmpvar_16.xyz = (_WorldSpaceCameraPos - (_Object2World * _glesVertex).xyz);
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize((tmpvar_15 * (_World2Object * tmpvar_16).xyz));
  tmpvar_5 = tmpvar_17;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_15 * (_World2Object * tmpvar_18).xyz));
  tmpvar_6 = tmpvar_19;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    ((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_19 = tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.xyz = color_19;
  tmpvar_28.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_28;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture2D (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    ((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_19 = tmpvar_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = clamp (((color_19 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.xyz = tmpvar_28;
  tmpvar_30.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_30;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  mediump vec3 color_19;
  mediump vec3 ramp_20;
  highp float nh_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_22 = tmpvar_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_21 = tmpvar_24;
  lowp vec2 tmpvar_25;
  tmpvar_25.y = 0.5;
  tmpvar_25.x = diff_22;
  lowp vec3 tmpvar_26;
  tmpvar_26 = texture (_RampMap, tmpvar_25).xyz;
  ramp_20 = tmpvar_26;
  highp vec3 tmpvar_27;
  tmpvar_27 = ((_SpecColor * (
    ((pow (nh_21, _SpecPower) * gloss_2) * _SpecMultiplier)
   * 2.0)) + ((ramp_20 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_19 = tmpvar_27;
  mediump vec3 tmpvar_28;
  highp vec3 tmpvar_29;
  tmpvar_29 = clamp (((color_19 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_28 = tmpvar_29;
  mediump vec4 tmpvar_30;
  tmpvar_30.xyz = tmpvar_28;
  tmpvar_30.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_30;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  lowp float tmpvar_19;
  highp vec3 coord_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_20.xy = tmpvar_21.xy;
  coord_20.z = (tmpvar_21.z - 0.00025);
  highp vec4 c_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SGameShadowTexture, tmpvar_21.xy);
  c_22 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp ((2.0 - exp(
    ((coord_20.z - dot (c_22, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_20.xy = (tmpvar_21.xy + vec2(0.000976563, 0.000976563));
  tmpvar_19 = ((tmpvar_24 * 0.5) + 0.5);
  mediump vec3 color_25;
  mediump vec3 ramp_26;
  highp float nh_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_28 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_27 = tmpvar_30;
  lowp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = diff_28;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_RampMap, tmpvar_31).xyz;
  ramp_26 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((_SpecColor * (
    (((pow (nh_27, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_19)
   * 2.0)) + ((ramp_26 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_25 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix ((tmpvar_17 * _ShadowColor.xyz), color_25, vec3(tmpvar_19));
  tmpvar_34.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_34;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec3 tmpvar_13;
  tmpvar_13 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_2);
  highp vec3 tmpvar_15;
  tmpvar_15 = (((tmpvar_14.yzx * tmpvar_13.zxy) - (tmpvar_14.zxy * tmpvar_13.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_16;
  tmpvar_16[0].x = tmpvar_13.x;
  tmpvar_16[0].y = tmpvar_15.x;
  tmpvar_16[0].z = tmpvar_14.x;
  tmpvar_16[1].x = tmpvar_13.y;
  tmpvar_16[1].y = tmpvar_15.y;
  tmpvar_16[1].z = tmpvar_14.y;
  tmpvar_16[2].x = tmpvar_13.z;
  tmpvar_16[2].y = tmpvar_15.z;
  tmpvar_16[2].z = tmpvar_14.z;
  highp vec4 tmpvar_17;
  tmpvar_17.w = 0.0;
  tmpvar_17.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize((tmpvar_16 * (_World2Object * tmpvar_17).xyz));
  tmpvar_5 = tmpvar_18;
  highp vec4 tmpvar_19;
  tmpvar_19.w = 0.0;
  tmpvar_19.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20 = normalize((tmpvar_16 * (_World2Object * tmpvar_19).xyz));
  tmpvar_6 = tmpvar_20;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  lowp float tmpvar_19;
  highp vec3 coord_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_20.xy = tmpvar_21.xy;
  coord_20.z = (tmpvar_21.z - 0.00025);
  highp vec4 c_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture (_SGameShadowTexture, tmpvar_21.xy);
  c_22 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp ((2.0 - exp(
    ((coord_20.z - dot (c_22, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_20.xy = (tmpvar_21.xy + vec2(0.000976563, 0.000976563));
  tmpvar_19 = ((tmpvar_24 * 0.5) + 0.5);
  mediump vec3 color_25;
  mediump vec3 ramp_26;
  highp float nh_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_28 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_27 = tmpvar_30;
  lowp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = diff_28;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture (_RampMap, tmpvar_31).xyz;
  ramp_26 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((_SpecColor * (
    (((pow (nh_27, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_19)
   * 2.0)) + ((ramp_26 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_25 = tmpvar_33;
  mediump vec4 tmpvar_34;
  tmpvar_34.xyz = mix ((tmpvar_17 * _ShadowColor.xyz), color_25, vec3(tmpvar_19));
  tmpvar_34.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_34;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles " {
Keywords { "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES


#ifdef VERTEX

attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT

uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
varying mediump vec4 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD1;
varying mediump vec3 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD4;
varying highp vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture2D (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture2D (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture2D (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  lowp float tmpvar_19;
  highp vec3 coord_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_20.xy = tmpvar_21.xy;
  coord_20.z = (tmpvar_21.z - 0.00025);
  highp vec4 c_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture2D (_SGameShadowTexture, tmpvar_21.xy);
  c_22 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp ((2.0 - exp(
    ((coord_20.z - dot (c_22, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_20.xy = (tmpvar_21.xy + vec2(0.000976563, 0.000976563));
  tmpvar_19 = ((tmpvar_24 * 0.5) + 0.5);
  mediump vec3 color_25;
  mediump vec3 ramp_26;
  highp float nh_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_28 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_27 = tmpvar_30;
  lowp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = diff_28;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture2D (_RampMap, tmpvar_31).xyz;
  ramp_26 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((_SpecColor * (
    (((pow (nh_27, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_19)
   * 2.0)) + ((ramp_26 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_25 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = mix ((tmpvar_17 * _ShadowColor.xyz), color_25, vec3(tmpvar_19));
  mediump vec3 tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = clamp (((tmpvar_34 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_35;
  tmpvar_37.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_37;
  gl_FragData[0] = tmpvar_1;
}



#endif"
}
SubProgram "gles3 " {
Keywords { "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3#version 300 es


#ifdef VERTEX


in vec4 _glesVertex;
in vec3 _glesNormal;
in vec4 _glesMultiTexCoord0;
in vec4 _glesTANGENT;
uniform highp vec4 _Time;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _Scroll2X;
uniform mediump float _Scroll2Y;
uniform highp vec4 _SGameShadowParams;
uniform highp mat4 _SGameShadowMatrix;
uniform highp vec4 _MainTex_ST;
uniform highp vec4 _NoiseTex_ST;
out mediump vec4 xlv_TEXCOORD0;
out mediump vec3 xlv_TEXCOORD1;
out mediump vec3 xlv_TEXCOORD2;
out mediump vec3 xlv_TEXCOORD3;
out highp vec4 xlv_TEXCOORD4;
out highp vec3 xlv_TEXCOORD5;
out highp vec4 xlv_TEXCOORD6;
void main ()
{
  vec4 tmpvar_1;
  tmpvar_1.xyz = normalize(_glesTANGENT.xyz);
  tmpvar_1.w = _glesTANGENT.w;
  highp vec3 tmpvar_2;
  tmpvar_2 = normalize(_glesNormal);
  mediump vec4 tmpvar_3;
  mediump vec3 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec2 tmpvar_7;
  tmpvar_7 = ((_glesMultiTexCoord0.xy * _MainTex_ST.xy) + _MainTex_ST.zw);
  tmpvar_3.xy = tmpvar_7;
  mediump vec2 tmpvar_8;
  tmpvar_8.x = _Scroll2X;
  tmpvar_8.y = _Scroll2Y;
  highp vec2 tmpvar_9;
  tmpvar_9 = (((_glesMultiTexCoord0.xy * _NoiseTex_ST.xy) + _NoiseTex_ST.zw) + fract((tmpvar_8 * _Time.x)));
  tmpvar_3.zw = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10.w = 0.0;
  tmpvar_10.xyz = tmpvar_2;
  highp vec3 tmpvar_11;
  tmpvar_11 = (glstate_matrix_modelview0 * tmpvar_10).xyz;
  tmpvar_4 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = (_Object2World * _glesVertex);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 0.0;
  tmpvar_13.xyz = tmpvar_2;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_1.xyz);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize(tmpvar_2);
  highp vec3 tmpvar_16;
  tmpvar_16 = (((tmpvar_15.yzx * tmpvar_14.zxy) - (tmpvar_15.zxy * tmpvar_14.yzx)) * _glesTANGENT.w);
  highp mat3 tmpvar_17;
  tmpvar_17[0].x = tmpvar_14.x;
  tmpvar_17[0].y = tmpvar_16.x;
  tmpvar_17[0].z = tmpvar_15.x;
  tmpvar_17[1].x = tmpvar_14.y;
  tmpvar_17[1].y = tmpvar_16.y;
  tmpvar_17[1].z = tmpvar_15.y;
  tmpvar_17[2].x = tmpvar_14.z;
  tmpvar_17[2].y = tmpvar_16.z;
  tmpvar_17[2].z = tmpvar_15.z;
  highp vec4 tmpvar_18;
  tmpvar_18.w = 0.0;
  tmpvar_18.xyz = (_WorldSpaceCameraPos - tmpvar_12.xyz);
  highp vec3 tmpvar_19;
  tmpvar_19 = normalize((tmpvar_17 * (_World2Object * tmpvar_18).xyz));
  tmpvar_5 = tmpvar_19;
  highp vec4 tmpvar_20;
  tmpvar_20.w = 0.0;
  tmpvar_20.xyz = -(_SGameShadowParams.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize((tmpvar_17 * (_World2Object * tmpvar_20).xyz));
  tmpvar_6 = tmpvar_21;
  gl_Position = (glstate_matrix_mvp * _glesVertex);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_4;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD5 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD6 = (_SGameShadowMatrix * tmpvar_12);
}



#endif
#ifdef FRAGMENT


layout(location=0) out mediump vec4 _glesFragData[4];
uniform highp mat4 _Object2World;
uniform mediump float _MMultiplier;
uniform mediump vec4 _ShadowColor;
uniform mediump float _SpecPower;
uniform mediump float _SpecMultiplier;
uniform mediump float _ReflectPower;
uniform mediump float _ReflectionMultiplier;
uniform mediump vec3 _NoiseColor;
uniform mediump vec3 _SpecColor;
uniform mediump vec3 _ReflectColor;
uniform highp float _Offset;
uniform mediump vec4 _HeightColor;
uniform highp float _HeightLightCompensation;
uniform sampler2D _MainTex;
uniform sampler2D _MaskTex;
uniform sampler2D _LightTex;
uniform sampler2D _NormalTex;
uniform sampler2D _NoiseTex;
uniform sampler2D _ReflectTex;
uniform sampler2D _RampMap;
uniform sampler2D _SGameShadowTexture;
in mediump vec4 xlv_TEXCOORD0;
in mediump vec3 xlv_TEXCOORD1;
in mediump vec3 xlv_TEXCOORD2;
in mediump vec3 xlv_TEXCOORD3;
in highp vec4 xlv_TEXCOORD4;
in highp vec3 xlv_TEXCOORD5;
in highp vec4 xlv_TEXCOORD6;
void main ()
{
  lowp vec4 tmpvar_1;
  mediump float gloss_2;
  mediump vec3 noise_3;
  mediump vec3 albedo_4;
  mediump vec3 normalTS_5;
  mediump vec2 tmpvar_6;
  mediump vec3 cse_7;
  cse_7 = normalize(xlv_TEXCOORD1);
  tmpvar_6 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec3 tmpvar_8;
  tmpvar_8 = normalize(((texture (_NormalTex, xlv_TEXCOORD0.xy).xyz * 2.0) - 1.0));
  normalTS_5 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture (_MainTex, xlv_TEXCOORD0.xy);
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture (_MaskTex, xlv_TEXCOORD0.xy);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((tmpvar_9.xyz + 0.15) * (texture (_LightTex, tmpvar_6) * 1.2).xyz);
  albedo_4 = tmpvar_11;
  lowp vec3 tmpvar_12;
  tmpvar_12 = texture (_NoiseTex, xlv_TEXCOORD0.zw).xyz;
  noise_3 = tmpvar_12;
  mediump vec3 tmpvar_13;
  tmpvar_13 = ((noise_3 * (tmpvar_9.xyz * _NoiseColor)) * (tmpvar_10.y * _MMultiplier));
  noise_3 = tmpvar_13;
  mediump vec3 tmpvar_14;
  tmpvar_14 = ((albedo_4 + tmpvar_9.xyz) + tmpvar_13);
  mediump vec2 tmpvar_15;
  tmpvar_15 = ((cse_7.xy * 0.5) + 0.5);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture (_ReflectTex, tmpvar_15);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (tmpvar_14, ((tmpvar_14 * 
    pow ((tmpvar_16.xyz * _ReflectColor), vec3(_ReflectPower))
  ) * _ReflectionMultiplier), tmpvar_10.zzz);
  albedo_4 = tmpvar_17;
  lowp float tmpvar_18;
  tmpvar_18 = tmpvar_10.x;
  gloss_2 = tmpvar_18;
  lowp float tmpvar_19;
  highp vec3 coord_20;
  highp vec3 tmpvar_21;
  tmpvar_21 = (((xlv_TEXCOORD6.xyz / xlv_TEXCOORD6.w) * 0.5) + 0.5);
  coord_20.xy = tmpvar_21.xy;
  coord_20.z = (tmpvar_21.z - 0.00025);
  highp vec4 c_22;
  lowp vec4 tmpvar_23;
  tmpvar_23 = texture (_SGameShadowTexture, tmpvar_21.xy);
  c_22 = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = clamp ((2.0 - exp(
    ((coord_20.z - dot (c_22, vec4(1.0, 0.00392157, 1.53787e-05, 6.03086e-08))) * 1024.0)
  )), 0.0, 1.0);
  coord_20.xy = (tmpvar_21.xy + vec2(0.000976563, 0.000976563));
  tmpvar_19 = ((tmpvar_24 * 0.5) + 0.5);
  mediump vec3 color_25;
  mediump vec3 ramp_26;
  highp float nh_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = ((dot (normalTS_5, xlv_TEXCOORD3) * 0.5) + 0.5);
  diff_28 = tmpvar_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (normalTS_5, normalize(
    (xlv_TEXCOORD3 + xlv_TEXCOORD2)
  )));
  nh_27 = tmpvar_30;
  lowp vec2 tmpvar_31;
  tmpvar_31.y = 0.5;
  tmpvar_31.x = diff_28;
  lowp vec3 tmpvar_32;
  tmpvar_32 = texture (_RampMap, tmpvar_31).xyz;
  ramp_26 = tmpvar_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = ((_SpecColor * (
    (((pow (nh_27, _SpecPower) * gloss_2) * _SpecMultiplier) * tmpvar_19)
   * 2.0)) + ((ramp_26 + vec3(0.5, 0.5, 0.5)) * tmpvar_17));
  color_25 = tmpvar_33;
  mediump vec3 tmpvar_34;
  tmpvar_34 = mix ((tmpvar_17 * _ShadowColor.xyz), color_25, vec3(tmpvar_19));
  mediump vec3 tmpvar_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = clamp (((tmpvar_34 * 
    mix (_HeightColor.xyz, vec3(1.0, 1.0, 1.0), clamp ((vec3((xlv_TEXCOORD4.y - 
      ((_Object2World * vec4(0.0, 0.0, 0.0, 1.0)).y - _Offset)
    )) + vec3((
      normalize(xlv_TEXCOORD5)
    .y * 0.5))), vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)))
  ) * _HeightLightCompensation), 0.0, 1.0);
  tmpvar_35 = tmpvar_36;
  mediump vec4 tmpvar_37;
  tmpvar_37.xyz = tmpvar_35;
  tmpvar_37.w = tmpvar_9.w;
  tmpvar_1 = tmpvar_37;
  _glesFragData[0] = tmpvar_1;
}



#endif"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "_DUMMY" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_DUMMY" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "_HEIGHT_LIGHT_ON" "_NOISETEX_ON" "_NORMALMAP_ON" "_SGAME_HEROSHOW_SHADOW_ON" "_REFLECTTEX_ON" }
"!!GLES3"
}
}
 }
}
}